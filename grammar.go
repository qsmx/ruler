// Code generated by goyacc - DO NOT EDIT.

package ruler

import __yyfmt__ "fmt"

type yySymType struct {
	yys   int
	value string

	ruler *rulerNode
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57367
	yyEofCode = 57344
	AND       = 57359
	ARGS      = 57364
	ARRAYS    = 57352
	EQU       = 57353
	FALSE     = 57349
	FILTER    = 57365
	FLOAT     = 57347
	FUNC      = 57363
	GEQ       = 57358
	GTR       = 57357
	IDENT     = 57351
	IN        = 57361
	INT       = 57346
	LEQ       = 57356
	LSS       = 57355
	NEG       = 57366
	NEQ       = 57354
	NOTIN     = 57362
	OR        = 57360
	STRING    = 57350
	TRUE      = 57348
	yyErrCode = 57345

	yyMaxDepth = 200
	yyTabOfs   = -48
)

var (
	yyPrec = map[int]int{
		OR:  0,
		AND: 1,
		EQU: 2,
		NEQ: 2,
		LSS: 3,
		LEQ: 3,
		GTR: 3,
		GEQ: 3,
		'-': 4,
		'+': 4,
		'*': 5,
		'/': 5,
		'%': 5,
		NEG: 6,
		'^': 7,
	}

	yyXLAT = map[int]int{
		45:    0,  // '-' (54x)
		41:    1,  // ')' (48x)
		57344: 2,  // $end (46x)
		57359: 3,  // AND (42x)
		57360: 4,  // OR (42x)
		93:    5,  // ']' (40x)
		37:    6,  // '%' (34x)
		42:    7,  // '*' (34x)
		43:    8,  // '+' (34x)
		47:    9,  // '/' (34x)
		57353: 10, // EQU (32x)
		57354: 11, // NEQ (32x)
		44:    12, // ',' (29x)
		57358: 13, // GEQ (28x)
		57357: 14, // GTR (28x)
		57356: 15, // LEQ (28x)
		57355: 16, // LSS (28x)
		40:    17, // '(' (21x)
		57352: 18, // ARRAYS (20x)
		57369: 19, // Arrays (20x)
		57372: 20, // CalcCell (20x)
		57375: 21, // ExprCalc (20x)
		57376: 22, // ExprExt (20x)
		57378: 23, // ExprFunc (20x)
		57347: 24, // FLOAT (20x)
		57380: 25, // Float (20x)
		57381: 26, // Ident (20x)
		57351: 27, // IDENT (20x)
		57346: 28, // INT (20x)
		57383: 29, // Int (20x)
		57384: 30, // String (20x)
		57350: 31, // STRING (20x)
		57370: 32, // Bool (9x)
		57371: 33, // BoolCell (9x)
		57349: 34, // FALSE (9x)
		57348: 35, // TRUE (9x)
		91:    36, // '[' (5x)
		57374: 37, // ExprBool (5x)
		57377: 38, // ExprFilter (5x)
		57379: 39, // FilterName (5x)
		57368: 40, // Args (1x)
		57373: 41, // Expr (1x)
		57382: 42, // Input (1x)
		57367: 43, // $default (0x)
		94:    44, // '^' (0x)
		57364: 45, // ARGS (0x)
		57345: 46, // error (0x)
		57365: 47, // FILTER (0x)
		57363: 48, // FUNC (0x)
		57361: 49, // IN (0x)
		57366: 50, // NEG (0x)
		57362: 51, // NOTIN (0x)
	}

	yySymNames = []string{
		"'-'",
		"')'",
		"$end",
		"AND",
		"OR",
		"']'",
		"'%'",
		"'*'",
		"'+'",
		"'/'",
		"EQU",
		"NEQ",
		"','",
		"GEQ",
		"GTR",
		"LEQ",
		"LSS",
		"'('",
		"ARRAYS",
		"Arrays",
		"CalcCell",
		"ExprCalc",
		"ExprExt",
		"ExprFunc",
		"FLOAT",
		"Float",
		"Ident",
		"IDENT",
		"INT",
		"Int",
		"String",
		"STRING",
		"Bool",
		"BoolCell",
		"FALSE",
		"TRUE",
		"'['",
		"ExprBool",
		"ExprFilter",
		"FilterName",
		"Args",
		"Expr",
		"Input",
		"$default",
		"'^'",
		"ARGS",
		"error",
		"FILTER",
		"FUNC",
		"IN",
		"NEG",
		"NOTIN",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {42, 0},
		2:  {42, 1},
		3:  {41, 1},
		4:  {41, 1},
		5:  {37, 1},
		6:  {37, 1},
		7:  {37, 1},
		8:  {37, 3},
		9:  {37, 3},
		10: {37, 3},
		11: {37, 3},
		12: {37, 3},
		13: {37, 3},
		14: {37, 3},
		15: {37, 3},
		16: {37, 3},
		17: {33, 1},
		18: {33, 1},
		19: {21, 1},
		20: {21, 3},
		21: {21, 3},
		22: {21, 3},
		23: {21, 3},
		24: {21, 3},
		25: {21, 2},
		26: {21, 3},
		27: {20, 1},
		28: {20, 1},
		29: {22, 1},
		30: {22, 1},
		31: {22, 1},
		32: {22, 1},
		33: {22, 1},
		34: {23, 3},
		35: {23, 4},
		36: {40, 1},
		37: {40, 3},
		38: {38, 4},
		39: {39, 1},
		40: {39, 1},
		41: {26, 1},
		42: {19, 1},
		43: {29, 1},
		44: {25, 1},
		45: {30, 1},
		46: {32, 1},
		47: {32, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [75][]uint8{
		// 0
		{60, 2: 47, 17: 58, 68, 62, 59, 57, 52, 54, 70, 64, 61, 66, 69, 63, 65, 71, 53, 56, 73, 72, 37: 51, 55, 67, 41: 50, 49},
		{2: 48},
		{2: 46},
		{2: 45, 77, 78},
		{21, 2: 44, 6: 21, 21, 21, 21, 21, 21, 13: 21, 21, 21, 21},
		// 5
		{1: 43, 43, 43, 43, 43, 10: 31, 31},
		{20, 42, 42, 42, 42, 42, 20, 20, 20, 20, 20, 20, 13: 20, 20, 20, 20},
		{1: 41, 41, 41, 41, 41},
		{10: 120, 119},
		{97, 6: 100, 98, 96, 99, 30, 30, 13: 114, 113, 112, 111},
		// 10
		{60, 17: 58, 68, 62, 59, 108, 76, 54, 70, 64, 61, 66, 69, 63, 65, 71, 53, 56, 73, 72, 37: 109, 55, 67},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{60, 17: 85, 68, 88, 59, 107, 76, 86, 70, 64, 87, 66, 69, 63, 65, 71},
		{19, 19, 19, 6: 19, 19, 19, 19, 19, 19, 13: 19, 19, 19, 19, 36: 9},
		{18, 18, 18, 6: 18, 18, 18, 18, 18, 18, 13: 18, 18, 18, 18, 36: 8},
		// 15
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 82, 36: 7},
		{36: 74},
		// 20
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 36: 6},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
		{1: 2, 2, 2, 2, 2, 10: 2, 2, 2},
		// 25
		{1: 1, 1, 1, 1, 1, 10: 1, 1, 1},
		{60, 17: 58, 68, 62, 59, 57, 76, 54, 70, 64, 61, 66, 69, 63, 65, 71, 53, 56, 73, 72, 37: 75, 55, 67},
		{3: 77, 78, 79},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{60, 17: 58, 68, 62, 59, 57, 76, 54, 70, 64, 61, 66, 69, 63, 65, 71, 53, 56, 73, 72, 37: 81, 55, 67},
		// 30
		{60, 17: 58, 68, 62, 59, 57, 76, 54, 70, 64, 61, 66, 69, 63, 65, 71, 53, 56, 73, 72, 37: 80, 55, 67},
		{1: 10, 10, 10, 10, 10},
		{1: 33, 33, 77, 33, 33},
		{1: 34, 34, 34, 34, 34},
		{60, 89, 17: 85, 68, 88, 59, 84, 76, 86, 70, 64, 87, 66, 69, 63, 65, 71, 83, 91, 73, 72, 40: 90},
		// 35
		{1: 31, 31, 31, 31, 31, 12: 31},
		{97, 30, 30, 30, 30, 30, 100, 98, 96, 99, 12: 30},
		{60, 17: 85, 68, 88, 59, 95, 76, 86, 70, 64, 87, 66, 69, 63, 65, 71},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		// 40
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		{1: 92, 12: 93},
		{1: 12, 12: 12},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
		// 45
		{60, 17: 85, 68, 88, 59, 84, 76, 86, 70, 64, 87, 66, 69, 63, 65, 71, 83, 94, 73, 72},
		{1: 11, 12: 11},
		{97, 101, 6: 100, 98, 96, 99},
		{60, 17: 85, 68, 88, 59, 106, 76, 86, 70, 64, 87, 66, 69, 63, 65, 71},
		{60, 17: 85, 68, 88, 59, 105, 76, 86, 70, 64, 87, 66, 69, 63, 65, 71},
		// 50
		{60, 17: 85, 68, 88, 59, 104, 76, 86, 70, 64, 87, 66, 69, 63, 65, 71},
		{60, 17: 85, 68, 88, 59, 103, 76, 86, 70, 64, 87, 66, 69, 63, 65, 71},
		{60, 17: 85, 68, 88, 59, 102, 76, 86, 70, 64, 87, 66, 69, 63, 65, 71},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24},
		// 55
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{27, 27, 27, 27, 27, 27, 100, 98, 27, 99, 27, 27, 27, 27, 27, 27, 27},
		{28, 28, 28, 28, 28, 28, 100, 98, 28, 99, 28, 28, 28, 28, 28, 28, 28},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		// 60
		{97, 101, 6: 100, 98, 96, 99, 30, 30, 13: 114, 113, 112, 111},
		{1: 110, 3: 77, 78},
		{1: 32, 32, 32, 32, 32},
		{60, 17: 85, 68, 88, 59, 118, 76, 86, 70, 64, 87, 66, 69, 63, 65, 71},
		{60, 17: 85, 68, 88, 59, 117, 76, 86, 70, 64, 87, 66, 69, 63, 65, 71},
		// 65
		{60, 17: 85, 68, 88, 59, 116, 76, 86, 70, 64, 87, 66, 69, 63, 65, 71},
		{60, 17: 85, 68, 88, 59, 115, 76, 86, 70, 64, 87, 66, 69, 63, 65, 71},
		{97, 35, 35, 35, 35, 35, 100, 98, 96, 99},
		{97, 36, 36, 36, 36, 36, 100, 98, 96, 99},
		{97, 37, 37, 37, 37, 37, 100, 98, 96, 99},
		// 70
		{97, 38, 38, 38, 38, 38, 100, 98, 96, 99},
		{60, 17: 85, 68, 88, 59, 84, 76, 86, 70, 64, 87, 66, 69, 63, 65, 71, 83, 122, 73, 72},
		{60, 17: 85, 68, 88, 59, 84, 76, 86, 70, 64, 87, 66, 69, 63, 65, 71, 83, 121, 73, 72},
		{1: 39, 39, 39, 39, 39},
		{1: 40, 40, 40, 40, 40},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer, outNode **rulerNode) int {
	const yyError = 46

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			if outNode != nil {
				*outNode = yyS[yypt-0].ruler
			}
		}
	case 8:
		{
			yyVAL.ruler = nodeFromNode(NEQ, yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 9:
		{
			yyVAL.ruler = nodeFromNode(EQU, yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 10:
		{
			yyVAL.ruler = nodeFromNode(LSS, yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 11:
		{
			yyVAL.ruler = nodeFromNode(LEQ, yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 12:
		{
			yyVAL.ruler = nodeFromNode(GTR, yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 13:
		{
			yyVAL.ruler = nodeFromNode(GEQ, yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 14:
		{
			yyVAL.ruler = nodeFromNode(AND, yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 15:
		{
			yyVAL.ruler = nodeFromNode(OR, yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 16:
		{
			yyVAL.ruler = yyS[yypt-1].ruler
		}
	case 20:
		{
			yyVAL.ruler = nodeFromNode('+', yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 21:
		{
			yyVAL.ruler = nodeFromNode('-', yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 22:
		{
			yyVAL.ruler = nodeFromNode('*', yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 23:
		{
			yyVAL.ruler = nodeFromNode('/', yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 24:
		{
			yyVAL.ruler = nodeFromNode('%', yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 25:
		{
			yyVAL.ruler = nodeFromNode(NEG, yyS[yypt-0].ruler)
		}
	case 26:
		{
			yyVAL.ruler = yyS[yypt-1].ruler
		}
	case 34:
		{
			yyVAL.ruler = nodeFromString(FUNC, yyS[yypt-2].value)
		}
	case 35:
		{
			yyVAL.ruler = nodeFromString(FUNC, yyS[yypt-3].value)
			yyVAL.ruler.ReplaceNode(yyS[yypt-1].ruler)
		}
	case 36:
		{
			yyVAL.ruler = nodeFromNode(ARGS, yyS[yypt-0].ruler)
		}
	case 37:
		{
			yyVAL.ruler = yyVAL.ruler.AppendNode(yyS[yypt-0].ruler)
		}
	case 38:
		{
			yyVAL.ruler = nodeFromNode(FILTER, yyS[yypt-3].ruler)
			yyVAL.ruler.AppendNode(yyS[yypt-1].ruler)
		}
	case 41:
		{
			yyVAL.ruler = nodeFromIdent(IDENT, yyS[yypt-0].value)
		}
	case 42:
		{
			yyVAL.ruler = nodeFromIdent(ARRAYS, yyS[yypt-0].value)
		}
	case 43:
		{
			yyVAL.ruler = nodeFromInt(ConvertInt(yyS[yypt-0].value))
		}
	case 44:
		{
			yyVAL.ruler = nodeFromFloat(ConvertFloat(yyS[yypt-0].value))
		}
	case 45:
		{
			yyVAL.ruler = nodeFromString(STRING, yyS[yypt-0].value)
		}
	case 46:
		{
			yyVAL.ruler = nodeFromBool(true)
		}
	case 47:
		{
			yyVAL.ruler = nodeFromBool(false)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
