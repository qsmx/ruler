// Code generated by goyacc - DO NOT EDIT.

package ruler

import __yyfmt__ "fmt"

import (
	"fmt"
)

type rulerSymType struct {
	yys   int
	value interface{}

	value_int    int64
	value_bool   bool
	value_string string
	value_float  float64
	value_slice  []interface{}
}

type rulerXError struct {
	state, xsym int
}

const (
	rulerDefault = 57365
	rulerEofCode = 57344
	AND          = 57360
	ARRAYS       = 57352
	EQU          = 57354
	FALSE        = 57349
	FILTER       = 57353
	FLOAT        = 57347
	GEQ          = 57359
	GTR          = 57358
	IDENT        = 57351
	IN           = 57362
	INT          = 57346
	LEQ          = 57357
	LSS          = 57356
	NEG          = 57364
	NEQ          = 57355
	NOTIN        = 57363
	OR           = 57361
	STRING       = 57350
	TRUE         = 57348
	rulerErrCode = 57345

	rulerMaxDepth = 200
	rulerTabOfs   = -13
)

var (
	rulerPrec = map[int]int{
		OR:  0,
		AND: 1,
		EQU: 2,
		NEQ: 2,
		LSS: 3,
		LEQ: 3,
		GTR: 3,
		GEQ: 3,
		'-': 4,
		'+': 4,
		'*': 5,
		'/': 5,
		NEG: 6,
		'^': 7,
	}

	rulerXLAT = map[int]int{
		57344: 0,  // $end (10x)
		91:    1,  // '[' (3x)
		93:    2,  // ']' (2x)
		57351: 3,  // IDENT (2x)
		57346: 4,  // INT (2x)
		57352: 5,  // ARRAYS (1x)
		57366: 6,  // Condition (1x)
		57367: 7,  // Expr (1x)
		57368: 8,  // Filter (1x)
		57369: 9,  // FilterData (1x)
		57347: 10, // FLOAT (1x)
		57370: 11, // Input (1x)
		57355: 12, // NEQ (1x)
		57350: 13, // STRING (1x)
		57365: 14, // $default (0x)
		42:    15, // '*' (0x)
		43:    16, // '+' (0x)
		45:    17, // '-' (0x)
		47:    18, // '/' (0x)
		94:    19, // '^' (0x)
		57360: 20, // AND (0x)
		57354: 21, // EQU (0x)
		57345: 22, // error (0x)
		57349: 23, // FALSE (0x)
		57353: 24, // FILTER (0x)
		57359: 25, // GEQ (0x)
		57358: 26, // GTR (0x)
		57362: 27, // IN (0x)
		57357: 28, // LEQ (0x)
		57356: 29, // LSS (0x)
		57364: 30, // NEG (0x)
		57363: 31, // NOTIN (0x)
		57361: 32, // OR (0x)
		57348: 33, // TRUE (0x)
	}

	rulerSymNames = []string{
		"$end",
		"'['",
		"']'",
		"IDENT",
		"INT",
		"ARRAYS",
		"Condition",
		"Expr",
		"Filter",
		"FilterData",
		"FLOAT",
		"Input",
		"NEQ",
		"STRING",
		"$default",
		"'*'",
		"'+'",
		"'-'",
		"'/'",
		"'^'",
		"AND",
		"EQU",
		"error",
		"FALSE",
		"FILTER",
		"GEQ",
		"GTR",
		"IN",
		"LEQ",
		"LSS",
		"NEG",
		"NOTIN",
		"OR",
		"TRUE",
	}

	rulerTokenLiteralStrings = map[int]string{}

	rulerReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {11, 0},
		2:  {11, 1},
		3:  {7, 1},
		4:  {7, 1},
		5:  {7, 1},
		6:  {7, 1},
		7:  {7, 1},
		8:  {7, 1},
		9:  {8, 4},
		10: {6, 3},
		11: {9, 1},
		12: {9, 1},
	}

	rulerXErrors = map[rulerXError]string{}

	rulerParseTab = [16][]uint8{
		// 0
		{12, 3: 19, 16, 20, 7: 15, 21, 22, 17, 14, 13: 18},
		{13},
		{11},
		{10},
		{9},
		// 5
		{8},
		{7, 2},
		{6, 1},
		{5},
		{1: 23},
		// 10
		{3: 25, 6: 24},
		{2: 28},
		{12: 26},
		{4: 27},
		{2: 3},
		// 15
		{4},
	}
)

var rulerDebug = 0

type rulerLexer interface {
	Lex(lval *rulerSymType) int
	Error(s string)
}

type rulerLexerEx interface {
	rulerLexer
	Reduced(rule, state int, lval *rulerSymType) bool
}

func rulerSymName(c int) (s string) {
	x, ok := rulerXLAT[c]
	if ok {
		return rulerSymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func rulerlex1(yylex rulerLexer, lval *rulerSymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = rulerEofCode
	}
	if rulerDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", rulerSymName(n), n, n, lval)
	}
	return n
}

func rulerParse(yylex rulerLexer, dp *DataPackage, res *bool) int {
	const yyError = 22

	yyEx, _ := yylex.(rulerLexerEx)
	var yyn int
	var yylval rulerSymType
	var yyVAL rulerSymType
	yyS := make([]rulerSymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if rulerDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]rulerSymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = rulerlex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = rulerXLAT[yychar]; !ok {
			yyxchar = len(rulerSymNames) // > tab width
		}
	}
	if rulerDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := rulerParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += rulerTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if rulerDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if rulerDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if rulerDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", rulerSymName(yychar), yystate)
			}
			msg, ok := rulerXErrors[rulerXError{yystate, yyxchar}]
			if !ok {
				msg, ok = rulerXErrors[rulerXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = rulerXErrors[rulerXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = rulerXErrors[rulerXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := rulerTokenLiteralStrings[yychar]
				if ls == "" {
					ls = rulerSymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := rulerParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + rulerTabOfs
					if yyn > 0 { // hit
						if rulerDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if rulerDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if rulerDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if rulerDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", rulerSymName(yychar))
			}
			if yychar == rulerEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := rulerReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]rulerSymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(rulerParseTab[yyS[yyp].yys][x]) + rulerTabOfs
	/* reduction by production r */
	if rulerDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, rulerSymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			fmt.Println(yyS[yypt-0].value_string)
		}
	case 3:
		{
			fmt.Println("INT:", yyS[yypt-0].value_string)
		}
	case 4:
		{
			fmt.Println("FLOAT:", yyS[yypt-0].value_string)
		}
	case 5:
		{
			fmt.Println("STRING:", yyS[yypt-0].value_string)
		}
	case 6:
		{
			fmt.Println("IDENT:", yyS[yypt-0].value_string)
		}
	case 7:
		{
			fmt.Println("ARRAYS:", yyS[yypt-0].value_string)
		}
	case 8:
		{
			fmt.Println("FILTER:", yyS[yypt-0].value_string)
		}
	case 9:
		{
			fmt.Printf("FilterData: %+v\n", yyS[yypt-3].value)
			for _, v := range []int{1, 2, 3} {
				fmt.Println("[", yyS[yypt-1].value_bool, "]", v)
			}
			yyVAL.value_string = "1"
		}
	case 10:
		{
			fmt.Println("sub:", (yyS[yypt-2].value_string + "!=" + yyS[yypt-0].value_string))
			yyVAL.value_bool = dp.GetInt(yyS[yypt-2].value_string) != ConvertInt(yyS[yypt-0].value_string)
		}
	case 11:
		{
			yyVAL.value = dp.GetAttr(yyS[yypt-0].value_string)
			dp.Next(yyS[yypt-0].value_string)
			fmt.Println("data:", yyS[yypt-0].value_string)
		}
	case 12:
		{
			yyVAL.value = yyS[yypt-0].value_string
			fmt.Println("Arrs:", yyS[yypt-0].value_string)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

func Parse(src string, data map[string]interface{}) bool {
	defer func() {
		if e := recover(); e != nil {
			fmt.Println(e)
			return
		}
	}()
	var res bool
	rulerParse(newLexer(src), NewDataPackage(data), &res)
	fmt.Println("res:", res)
	return res
}
