// Code generated by goyacc - DO NOT EDIT.

package ruler

import __yyfmt__ "fmt"

type yySymType struct {
	yys   int
	value string

	ruler *rulerNode
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57369
	yyEofCode = 57344
	AND       = 57359
	ARGS      = 57364
	ARRAYS    = 57352
	EQU       = 57353
	FALSE     = 57349
	FILTER    = 57365
	FLOAT     = 57347
	FUNC      = 57363
	GEQ       = 57358
	GTR       = 57357
	IDENT     = 57351
	IN        = 57361
	INT       = 57346
	LEQ       = 57356
	LISTA     = 57366
	LISTO     = 57367
	LSS       = 57355
	NEG       = 57368
	NEQ       = 57354
	NOTIN     = 57362
	OR        = 57360
	STRING    = 57350
	TRUE      = 57348
	yyErrCode = 57345

	yyMaxDepth = 200
	yyTabOfs   = -61
)

var (
	yyPrec = map[int]int{
		OR:  0,
		AND: 1,
		EQU: 2,
		NEQ: 2,
		LSS: 3,
		LEQ: 3,
		GTR: 3,
		GEQ: 3,
		'-': 4,
		'+': 4,
		'*': 5,
		'/': 5,
		'%': 5,
		NEG: 6,
		'^': 7,
	}

	yyXLAT = map[int]int{
		41:    0,  // ')' (64x)
		45:    1,  // '-' (62x)
		57344: 2,  // $end (57x)
		57359: 3,  // AND (50x)
		57360: 4,  // OR (50x)
		93:    5,  // ']' (42x)
		37:    6,  // '%' (37x)
		42:    7,  // '*' (37x)
		43:    8,  // '+' (37x)
		47:    9,  // '/' (37x)
		44:    10, // ',' (36x)
		57353: 11, // EQU (35x)
		57354: 12, // NEQ (35x)
		57361: 13, // IN (33x)
		57362: 14, // NOTIN (33x)
		57358: 15, // GEQ (31x)
		57357: 16, // GTR (31x)
		57356: 17, // LEQ (31x)
		57355: 18, // LSS (31x)
		40:    19, // '(' (28x)
		57352: 20, // ARRAYS (28x)
		57371: 21, // Arrays (28x)
		57378: 22, // ExprExt (28x)
		57347: 23, // FLOAT (28x)
		57384: 24, // Float (28x)
		57385: 25, // Ident (28x)
		57351: 26, // IDENT (28x)
		57346: 27, // INT (28x)
		57388: 28, // Int (28x)
		57350: 29, // STRING (28x)
		57389: 30, // String (28x)
		57374: 31, // CalcCell (25x)
		57377: 32, // ExprCalc (25x)
		57380: 33, // ExprFunc (25x)
		57372: 34, // Bool (14x)
		57373: 35, // BoolCell (14x)
		57349: 36, // FALSE (14x)
		57348: 37, // TRUE (14x)
		57376: 38, // ExprBool (10x)
		91:    39, // '[' (7x)
		57382: 40, // FilterCell (4x)
		57383: 41, // FilterName (4x)
		57379: 42, // ExprFilter (2x)
		57386: 43, // InArgs (2x)
		57370: 44, // Args (1x)
		57375: 45, // Expr (1x)
		57381: 46, // ExprList (1x)
		57387: 47, // Input (1x)
		57369: 48, // $default (0x)
		94:    49, // '^' (0x)
		57364: 50, // ARGS (0x)
		57345: 51, // error (0x)
		57365: 52, // FILTER (0x)
		57363: 53, // FUNC (0x)
		57366: 54, // LISTA (0x)
		57367: 55, // LISTO (0x)
		57368: 56, // NEG (0x)
	}

	yySymNames = []string{
		"')'",
		"'-'",
		"$end",
		"AND",
		"OR",
		"']'",
		"'%'",
		"'*'",
		"'+'",
		"'/'",
		"','",
		"EQU",
		"NEQ",
		"IN",
		"NOTIN",
		"GEQ",
		"GTR",
		"LEQ",
		"LSS",
		"'('",
		"ARRAYS",
		"Arrays",
		"ExprExt",
		"FLOAT",
		"Float",
		"Ident",
		"IDENT",
		"INT",
		"Int",
		"STRING",
		"String",
		"CalcCell",
		"ExprCalc",
		"ExprFunc",
		"Bool",
		"BoolCell",
		"FALSE",
		"TRUE",
		"ExprBool",
		"'['",
		"FilterCell",
		"FilterName",
		"ExprFilter",
		"InArgs",
		"Args",
		"Expr",
		"ExprList",
		"Input",
		"$default",
		"'^'",
		"ARGS",
		"error",
		"FILTER",
		"FUNC",
		"LISTA",
		"LISTO",
		"NEG",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {47, 0},
		2:  {47, 1},
		3:  {45, 1},
		4:  {45, 1},
		5:  {45, 1},
		6:  {46, 1},
		7:  {46, 1},
		8:  {38, 1},
		9:  {38, 1},
		10: {38, 5},
		11: {38, 5},
		12: {38, 3},
		13: {38, 3},
		14: {38, 3},
		15: {38, 3},
		16: {38, 3},
		17: {38, 3},
		18: {38, 3},
		19: {38, 3},
		20: {38, 3},
		21: {35, 1},
		22: {35, 1},
		23: {32, 1},
		24: {32, 3},
		25: {32, 3},
		26: {32, 3},
		27: {32, 3},
		28: {32, 3},
		29: {32, 2},
		30: {32, 3},
		31: {31, 1},
		32: {31, 1},
		33: {43, 1},
		34: {43, 3},
		35: {22, 1},
		36: {22, 1},
		37: {22, 1},
		38: {22, 1},
		39: {22, 1},
		40: {33, 3},
		41: {33, 4},
		42: {44, 1},
		43: {44, 3},
		44: {42, 3},
		45: {42, 3},
		46: {42, 3},
		47: {42, 3},
		48: {42, 3},
		49: {40, 4},
		50: {41, 1},
		51: {41, 1},
		52: {25, 1},
		53: {25, 1},
		54: {25, 1},
		55: {21, 1},
		56: {28, 1},
		57: {24, 1},
		58: {30, 1},
		59: {34, 1},
		60: {34, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [105][]uint16{
		// 0
		{1: 76, 60, 13: 83, 84, 19: 74, 85, 77, 65, 87, 79, 71, 81, 86, 78, 88, 80, 75, 73, 70, 69, 72, 90, 89, 64, 40: 67, 82, 68, 45: 63, 66, 62},
		{2: 61},
		{2: 59},
		{2: 58, 158, 159},
		{1: 30, 57, 6: 30, 30, 30, 30, 11: 30, 30, 15: 30, 30, 30, 30},
		// 5
		{2: 56},
		{2: 55, 154, 155},
		{2: 54},
		{53, 2: 53, 53, 53, 53, 11: 40, 40},
		{52, 29, 52, 52, 52, 52, 29, 29, 29, 29, 11: 29, 29, 15: 29, 29, 29, 29},
		// 10
		{26, 26, 26, 6: 26, 26, 26, 26, 11: 26, 26, 128, 129, 26, 26, 26, 26, 39: 11},
		{11: 163, 162},
		{1: 109, 6: 112, 110, 108, 111, 11: 39, 39, 15: 107, 106, 105, 104},
		{1: 76, 13: 83, 84, 19: 74, 85, 77, 95, 87, 79, 71, 81, 86, 78, 88, 80, 75, 97, 70, 69, 72, 90, 89, 150, 40: 151, 82, 152},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 15: 38, 38, 38, 38},
		// 15
		{1: 76, 13: 83, 84, 19: 115, 85, 96, 95, 87, 79, 117, 81, 86, 78, 88, 80, 75, 149, 116},
		{25, 25, 25, 6: 25, 25, 25, 25, 11: 25, 25, 15: 25, 25, 25, 25, 39: 10},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 15: 24, 24, 24, 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 15: 23, 23, 23, 23},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 15: 22, 22, 22, 22},
		// 20
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 140, 39: 9},
		{39: 91},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 39: 8},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 39: 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 15: 6, 6, 6, 6, 39: 6},
		// 25
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 15: 5, 5, 5, 5},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 15: 4, 4, 4, 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 15: 3, 3, 3, 3},
		{2, 2: 2, 2, 2, 2, 10: 2, 2, 2},
		{1, 2: 1, 1, 1, 1, 10: 1, 1, 1},
		// 30
		{1: 76, 13: 83, 84, 19: 94, 85, 96, 95, 87, 79, 92, 81, 86, 78, 88, 80, 75, 73, 70, 69, 72, 90, 89, 93},
		{26, 26, 6: 26, 26, 26, 26, 11: 26, 26, 128, 129, 26, 26, 26, 26},
		{3: 99, 100, 127},
		{1: 76, 13: 83, 84, 19: 94, 85, 96, 95, 87, 79, 92, 81, 86, 78, 88, 80, 75, 97, 70, 69, 72, 90, 89, 98},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 15: 30, 30, 30, 30},
		// 35
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 15: 25, 25, 25, 25},
		{113, 109, 6: 112, 110, 108, 111, 11: 39, 39, 15: 107, 106, 105, 104},
		{101, 3: 99, 100},
		{1: 76, 13: 83, 84, 19: 94, 85, 96, 95, 87, 79, 92, 81, 86, 78, 88, 80, 75, 73, 70, 69, 72, 90, 89, 103},
		{1: 76, 13: 83, 84, 19: 94, 85, 96, 95, 87, 79, 92, 81, 86, 78, 88, 80, 75, 73, 70, 69, 72, 90, 89, 102},
		// 40
		{41, 2: 41, 41, 41, 41},
		{42, 2: 42, 99, 42, 42},
		{43, 2: 43, 43, 43, 43},
		{1: 76, 13: 83, 84, 19: 115, 85, 96, 95, 87, 79, 117, 81, 86, 78, 88, 80, 75, 126, 116},
		{1: 76, 13: 83, 84, 19: 115, 85, 96, 95, 87, 79, 117, 81, 86, 78, 88, 80, 75, 125, 116},
		// 45
		{1: 76, 13: 83, 84, 19: 115, 85, 96, 95, 87, 79, 117, 81, 86, 78, 88, 80, 75, 124, 116},
		{1: 76, 13: 83, 84, 19: 115, 85, 96, 95, 87, 79, 117, 81, 86, 78, 88, 80, 75, 123, 116},
		{1: 76, 13: 83, 84, 19: 115, 85, 96, 95, 87, 79, 117, 81, 86, 78, 88, 80, 75, 122, 116},
		{1: 76, 13: 83, 84, 19: 115, 85, 96, 95, 87, 79, 117, 81, 86, 78, 88, 80, 75, 121, 116},
		{1: 76, 13: 83, 84, 19: 115, 85, 96, 95, 87, 79, 117, 81, 86, 78, 88, 80, 75, 120, 116},
		// 50
		{1: 76, 13: 83, 84, 19: 115, 85, 96, 95, 87, 79, 117, 81, 86, 78, 88, 80, 75, 119, 116},
		{1: 76, 13: 83, 84, 19: 115, 85, 96, 95, 87, 79, 117, 81, 86, 78, 88, 80, 75, 114, 116},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15: 31, 31, 31, 31},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 15: 33, 33, 33, 33},
		{1: 76, 13: 83, 84, 19: 115, 85, 96, 95, 87, 79, 117, 81, 86, 78, 88, 80, 75, 118, 116},
		// 55
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 15: 29, 29, 29, 29},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 15: 26, 26, 26, 26},
		{113, 109, 6: 112, 110, 108, 111},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 15: 34, 34, 34, 34},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 15: 35, 35, 35, 35},
		// 60
		{36, 36, 36, 36, 36, 36, 112, 110, 36, 111, 36, 36, 36, 15: 36, 36, 36, 36},
		{37, 37, 37, 37, 37, 37, 112, 110, 37, 111, 37, 37, 37, 15: 37, 37, 37, 37},
		{44, 109, 44, 44, 44, 44, 112, 110, 108, 111},
		{45, 109, 45, 45, 45, 45, 112, 110, 108, 111},
		{46, 109, 46, 46, 46, 46, 112, 110, 108, 111},
		// 65
		{47, 109, 47, 47, 47, 47, 112, 110, 108, 111},
		{12, 2: 12, 12, 12},
		{19: 137},
		{19: 130},
		{13: 83, 84, 20: 85, 96, 132, 87, 79, 117, 133, 86, 78, 88, 80, 43: 131},
		// 70
		{134, 10: 135},
		{28, 10: 28},
		{9, 10: 9},
		{50, 2: 50, 50, 50, 50},
		{13: 83, 84, 20: 85, 96, 136, 87, 79, 117, 133, 86, 78, 88, 80},
		// 75
		{27, 10: 27},
		{13: 83, 84, 20: 85, 96, 132, 87, 79, 117, 133, 86, 78, 88, 80, 43: 138},
		{139, 10: 135},
		{51, 2: 51, 51, 51, 51},
		{143, 76, 13: 83, 84, 19: 115, 85, 96, 95, 87, 79, 117, 81, 86, 78, 88, 80, 75, 142, 116, 141, 145, 90, 89, 44: 144},
		// 80
		{40, 2: 40, 40, 40, 40, 10: 40},
		{39, 109, 39, 39, 39, 39, 112, 110, 108, 111, 39},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 15: 21, 21, 21, 21},
		{146, 10: 147},
		{19, 10: 19},
		// 85
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15: 20, 20, 20, 20},
		{1: 76, 13: 83, 84, 19: 115, 85, 96, 95, 87, 79, 117, 81, 86, 78, 88, 80, 75, 142, 116, 141, 148, 90, 89},
		{18, 10: 18},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 15: 32, 32, 32, 32},
		{101, 3: 158, 159},
		// 90
		{3: 154, 155},
		{153},
		{13, 2: 13},
		{1: 76, 13: 83, 84, 19: 94, 85, 96, 95, 87, 79, 92, 81, 86, 78, 88, 80, 75, 73, 70, 69, 72, 90, 89, 157},
		{1: 76, 13: 83, 84, 19: 94, 85, 96, 95, 87, 79, 92, 81, 86, 78, 88, 80, 75, 73, 70, 69, 72, 90, 89, 156},
		// 95
		{16, 2: 16, 99, 100},
		{17, 2: 17, 99, 100},
		{1: 76, 13: 83, 84, 19: 94, 85, 77, 95, 87, 79, 71, 81, 86, 78, 88, 80, 75, 73, 70, 69, 72, 90, 89, 103, 40: 161, 82},
		{1: 76, 13: 83, 84, 19: 94, 85, 77, 95, 87, 79, 71, 81, 86, 78, 88, 80, 75, 73, 70, 69, 72, 90, 89, 102, 40: 160, 82},
		{14, 2: 14},
		// 100
		{15, 2: 15},
		{1: 76, 13: 83, 84, 19: 115, 85, 96, 95, 87, 79, 117, 81, 86, 78, 88, 80, 75, 142, 116, 141, 165, 90, 89},
		{1: 76, 13: 83, 84, 19: 115, 85, 96, 95, 87, 79, 117, 81, 86, 78, 88, 80, 75, 142, 116, 141, 164, 90, 89},
		{48, 2: 48, 48, 48, 48},
		{49, 2: 49, 49, 49, 49},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer, outNode **rulerNode) int {
	const yyError = 51

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			if outNode != nil {
				*outNode = yyS[yypt-0].ruler
			}
		}
	case 10:
		{
			yyVAL.ruler = nodeFromString(IN, "i")
			yyVAL.ruler.AppendNode(yyS[yypt-4].ruler, yyS[yypt-1].ruler)
		}
	case 11:
		{
			yyVAL.ruler = nodeFromString(IN, "n")
			yyVAL.ruler.AppendNode(yyS[yypt-4].ruler, yyS[yypt-1].ruler)
		}
	case 12:
		{
			yyVAL.ruler = nodeFromNode(NEQ, yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 13:
		{
			yyVAL.ruler = nodeFromNode(EQU, yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 14:
		{
			yyVAL.ruler = nodeFromNode(LSS, yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 15:
		{
			yyVAL.ruler = nodeFromNode(LEQ, yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 16:
		{
			yyVAL.ruler = nodeFromNode(GTR, yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 17:
		{
			yyVAL.ruler = nodeFromNode(GEQ, yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 18:
		{
			yyVAL.ruler = nodeFromNode(AND, yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 19:
		{
			yyVAL.ruler = nodeFromNode(OR, yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 20:
		{
			yyVAL.ruler = yyS[yypt-1].ruler
		}
	case 24:
		{
			yyVAL.ruler = nodeFromNode('+', yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 25:
		{
			yyVAL.ruler = nodeFromNode('-', yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 26:
		{
			yyVAL.ruler = nodeFromNode('*', yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 27:
		{
			yyVAL.ruler = nodeFromNode('/', yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 28:
		{
			yyVAL.ruler = nodeFromNode('%', yyS[yypt-2].ruler, yyS[yypt-0].ruler)
		}
	case 29:
		{
			yyVAL.ruler = nodeFromNode(NEG, yyS[yypt-0].ruler)
		}
	case 30:
		{
			yyVAL.ruler = yyS[yypt-1].ruler
		}
	case 33:
		{
			yyVAL.ruler = nodeFromNode(ARGS, yyS[yypt-0].ruler)
		}
	case 34:
		{
			yyVAL.ruler = yyVAL.ruler.AppendNode(yyS[yypt-0].ruler)
		}
	case 40:
		{
			yyVAL.ruler = nodeFromString(FUNC, yyS[yypt-2].value)
		}
	case 41:
		{
			yyVAL.ruler = nodeFromString(FUNC, yyS[yypt-3].value)
			yyVAL.ruler.ReplaceNode(yyS[yypt-1].ruler)
		}
	case 42:
		{
			yyVAL.ruler = nodeFromNode(ARGS, yyS[yypt-0].ruler)
		}
	case 43:
		{
			yyVAL.ruler = yyVAL.ruler.AppendNode(yyS[yypt-0].ruler)
		}
	case 44:
		{
			yyVAL.ruler = nodeFromNode(LISTA, yyS[yypt-0].ruler)
			yyVAL.ruler.AppendNode(yyS[yypt-2].ruler)
		}
	case 45:
		{
			yyVAL.ruler = nodeFromNode(LISTO, yyS[yypt-0].ruler)
			yyVAL.ruler.AppendNode(yyS[yypt-2].ruler)
		}
	case 46:
		{
			yyVAL.ruler = nodeFromNode(LISTA, yyS[yypt-2].ruler)
			yyVAL.ruler.AppendNode(yyS[yypt-0].ruler)
		}
	case 47:
		{
			yyVAL.ruler = nodeFromNode(LISTO, yyS[yypt-2].ruler)
			yyVAL.ruler.AppendNode(yyS[yypt-0].ruler)
		}
	case 48:
		{
			yyVAL.ruler = yyS[yypt-1].ruler
		}
	case 49:
		{
			yyVAL.ruler = nodeFromNode(FILTER, yyS[yypt-3].ruler)
			yyVAL.ruler.AppendNode(yyS[yypt-1].ruler)
		}
	case 52:
		{
			yyVAL.ruler = nodeFromIdent(IDENT, yyS[yypt-0].value)
		}
	case 53:
		{
			yyVAL.ruler = nodeFromIdent(IDENT, "in")
		}
	case 54:
		{
			yyVAL.ruler = nodeFromIdent(IDENT, "notin")
		}
	case 55:
		{
			yyVAL.ruler = nodeFromIdent(ARRAYS, yyS[yypt-0].value)
		}
	case 56:
		{
			yyVAL.ruler = nodeFromInt(ConvertInt(yyS[yypt-0].value))
		}
	case 57:
		{
			yyVAL.ruler = nodeFromFloat(ConvertFloat(yyS[yypt-0].value))
		}
	case 58:
		{
			yyVAL.ruler = nodeFromString(STRING, yyS[yypt-0].value)
		}
	case 59:
		{
			yyVAL.ruler = nodeFromBool(true)
		}
	case 60:
		{
			yyVAL.ruler = nodeFromBool(false)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
