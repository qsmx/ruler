state 0 //

    0 $accept: . Input
    1 Input: .  [$end]

    $end    reduce using rule 1 (Input)
    '('     shift, and goto state 10
    '-'     shift, and goto state 14
    '['     shift, and goto state 11
    ARRAY   shift, and goto state 23
    FALSE   shift, and goto state 22
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20
    TRUE    shift, and goto state 21

    Bool        goto state 5
    BoolCell    goto state 8
    CalcCell    goto state 13
    Expr        goto state 2
    ExprBool    goto state 3
    ExprCalc    goto state 9
    ExprFilter  goto state 4
    ExprFunc    goto state 6
    Float       goto state 16
    IDENTS      goto state 12
    Ident       goto state 7
    Input       goto state 1
    Int         goto state 15
    String      goto state 17

state 1 // [$end]

    0 $accept: Input .  [$end]

    $end  accept

state 2 // FALSE [$end]

    2 Input: Expr .  [$end]

    $end  reduce using rule 2 (Input)

state 3 // FALSE [$end]

    3 Expr: ExprBool .  [$end]
    9 ExprBool: ExprBool . AND ExprBool  // assoc %left, prec 2
   10 ExprBool: ExprBool . OR ExprBool  // assoc %left, prec 1
   20 ExprFilter: ExprBool . AND ExprFilter  // assoc %left, prec 2
   21 ExprFilter: ExprBool . OR ExprFilter  // assoc %left, prec 1

    $end  reduce using rule 3 (Expr)
    AND   shift, and goto state 90
    OR    shift, and goto state 91

state 4 // '[' FALSE ']' [$end]

    4 Expr: ExprFilter .  [$end]
   22 ExprFilter: ExprFilter . AND ExprBool  // assoc %left, prec 2
   23 ExprFilter: ExprFilter . OR ExprBool  // assoc %left, prec 1

    $end  reduce using rule 4 (Expr)
    AND   shift, and goto state 85
    OR    shift, and goto state 86

state 5 // FALSE [$end]

    5 ExprBool: Bool .  [$end, ')', ']', AND, OR]
   39 BoolCell: Bool .  [EQU, NEQ]

    $end  reduce using rule 5 (ExprBool)
    ')'   reduce using rule 5 (ExprBool)
    ']'   reduce using rule 5 (ExprBool)
    AND   reduce using rule 5 (ExprBool)
    EQU   reduce using rule 39 (BoolCell)
    NEQ   reduce using rule 39 (BoolCell)
    OR    reduce using rule 5 (ExprBool)

state 6 // IDENT '(' ')' [$end]

    6 ExprBool: ExprFunc .  [$end, ')', ']', AND, OR]
   45 CalcCell: ExprFunc .  ['%', ')', '*', '+', '-', '/', BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ]

    $end    reduce using rule 6 (ExprBool)
    '%'     reduce using rule 45 (CalcCell)
    ')'     reduce using rule 6 (ExprBool)
    '*'     reduce using rule 45 (CalcCell)
    '+'     reduce using rule 45 (CalcCell)
    '-'     reduce using rule 45 (CalcCell)
    '/'     reduce using rule 45 (CalcCell)
    ']'     reduce using rule 6 (ExprBool)
    AND     reduce using rule 6 (ExprBool)
    BITAND  reduce using rule 45 (CalcCell)
    BITOR   reduce using rule 45 (CalcCell)
    EQU     reduce using rule 45 (CalcCell)
    GEQ     reduce using rule 45 (CalcCell)
    GTR     reduce using rule 45 (CalcCell)
    LEQ     reduce using rule 45 (CalcCell)
    LSS     reduce using rule 45 (CalcCell)
    NEQ     reduce using rule 45 (CalcCell)
    OR      reduce using rule 6 (ExprBool)
    conflict on ')', reduce using rule 6, reduce using rule 45

state 7 // ARRAY ['%']

    7 ExprBool: Ident . IN '(' FuncArgs ')'
    8 ExprBool: Ident . NOTIN '(' FuncArgs ')'
   19 ExprFilter: Ident . '[' ExprBool ']'
   44 CalcCell: Ident .  ['%', ')', '*', '+', '-', '/', BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ]

    '%'     reduce using rule 44 (CalcCell)
    ')'     reduce using rule 44 (CalcCell)
    '*'     reduce using rule 44 (CalcCell)
    '+'     reduce using rule 44 (CalcCell)
    '-'     reduce using rule 44 (CalcCell)
    '/'     reduce using rule 44 (CalcCell)
    '['     shift, and goto state 100
    BITAND  reduce using rule 44 (CalcCell)
    BITOR   reduce using rule 44 (CalcCell)
    EQU     reduce using rule 44 (CalcCell)
    GEQ     reduce using rule 44 (CalcCell)
    GTR     reduce using rule 44 (CalcCell)
    IN      shift, and goto state 75
    LEQ     reduce using rule 44 (CalcCell)
    LSS     reduce using rule 44 (CalcCell)
    NEQ     reduce using rule 44 (CalcCell)
    NOTIN   shift, and goto state 76

state 8 // ARRAY [EQU]

   11 ExprBool: BoolCell . EQU BoolCell  // assoc %left, prec 5
   12 ExprBool: BoolCell . NEQ BoolCell  // assoc %left, prec 5

    EQU  shift, and goto state 96
    NEQ  shift, and goto state 97

state 9 // ARRAY ['%']

   13 ExprBool: ExprCalc . LSS ExprCalc  // assoc %left, prec 5
   14 ExprBool: ExprCalc . LEQ ExprCalc  // assoc %left, prec 5
   15 ExprBool: ExprCalc . GTR ExprCalc  // assoc %left, prec 5
   16 ExprBool: ExprCalc . GEQ ExprCalc  // assoc %left, prec 5
   30 ExprCalc: ExprCalc . '+' ExprCalc  // assoc %left, prec 6
   31 ExprCalc: ExprCalc . '-' ExprCalc  // assoc %left, prec 6
   32 ExprCalc: ExprCalc . '*' ExprCalc  // assoc %left, prec 7
   33 ExprCalc: ExprCalc . '/' ExprCalc  // assoc %left, prec 7
   34 ExprCalc: ExprCalc . '%' ExprCalc  // assoc %left, prec 7
   35 ExprCalc: ExprCalc . BITAND ExprCalc  // assoc %left, prec 4
   36 ExprCalc: ExprCalc . BITOR ExprCalc  // assoc %left, prec 3
   40 BoolCell: ExprCalc .  [EQU, NEQ]

    '%'     shift, and goto state 36
    '*'     shift, and goto state 34
    '+'     shift, and goto state 32
    '-'     shift, and goto state 33
    '/'     shift, and goto state 35
    BITAND  shift, and goto state 37
    BITOR   shift, and goto state 38
    EQU     reduce using rule 40 (BoolCell)
    GEQ     shift, and goto state 64
    GTR     shift, and goto state 63
    LEQ     shift, and goto state 62
    LSS     shift, and goto state 61
    NEQ     reduce using rule 40 (BoolCell)

state 10 // '('

   17 ExprBool: '(' . ExprBool ')'
   24 ExprFilter: '(' . ExprFilter ')'
   38 ExprCalc: '(' . ExprCalc ')'

    '('     shift, and goto state 10
    '-'     shift, and goto state 14
    '['     shift, and goto state 11
    ARRAY   shift, and goto state 23
    FALSE   shift, and goto state 22
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20
    TRUE    shift, and goto state 21

    Bool        goto state 5
    BoolCell    goto state 8
    CalcCell    goto state 13
    ExprBool    goto state 83
    ExprCalc    goto state 60
    ExprFilter  goto state 84
    ExprFunc    goto state 6
    Float       goto state 16
    IDENTS      goto state 12
    Ident       goto state 7
    Int         goto state 15
    String      goto state 17

state 11 // '['

   18 ExprFilter: '[' . ExprBool ']'

    '('     shift, and goto state 58
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FALSE   shift, and goto state 22
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20
    TRUE    shift, and goto state 21

    Bool      goto state 5
    BoolCell  goto state 8
    CalcCell  goto state 13
    ExprBool  goto state 57
    ExprCalc  goto state 9
    ExprFunc  goto state 6
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 56
    Int       goto state 15
    String    goto state 17

state 12 // IDENT [$end]

   25 ExprFunc: IDENTS . '(' ')'
   26 ExprFunc: IDENTS . '(' FuncArgs ')'
   51 Ident: IDENTS .  [$end, '%', ')', '*', '+', ',', '-', '/', '[', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, IN, LEQ, LSS, NEQ, NOTIN, OR]

    $end    reduce using rule 51 (Ident)
    '%'     reduce using rule 51 (Ident)
    '('     shift, and goto state 47
    ')'     reduce using rule 51 (Ident)
    '*'     reduce using rule 51 (Ident)
    '+'     reduce using rule 51 (Ident)
    ','     reduce using rule 51 (Ident)
    '-'     reduce using rule 51 (Ident)
    '/'     reduce using rule 51 (Ident)
    '['     reduce using rule 51 (Ident)
    ']'     reduce using rule 51 (Ident)
    AND     reduce using rule 51 (Ident)
    BITAND  reduce using rule 51 (Ident)
    BITOR   reduce using rule 51 (Ident)
    EQU     reduce using rule 51 (Ident)
    GEQ     reduce using rule 51 (Ident)
    GTR     reduce using rule 51 (Ident)
    IN      reduce using rule 51 (Ident)
    LEQ     reduce using rule 51 (Ident)
    LSS     reduce using rule 51 (Ident)
    NEQ     reduce using rule 51 (Ident)
    NOTIN   reduce using rule 51 (Ident)
    OR      reduce using rule 51 (Ident)

state 13 // ARRAY ['%']

   29 ExprCalc: CalcCell .  [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ, OR]

    $end    reduce using rule 29 (ExprCalc)
    '%'     reduce using rule 29 (ExprCalc)
    ')'     reduce using rule 29 (ExprCalc)
    '*'     reduce using rule 29 (ExprCalc)
    '+'     reduce using rule 29 (ExprCalc)
    ','     reduce using rule 29 (ExprCalc)
    '-'     reduce using rule 29 (ExprCalc)
    '/'     reduce using rule 29 (ExprCalc)
    ']'     reduce using rule 29 (ExprCalc)
    AND     reduce using rule 29 (ExprCalc)
    BITAND  reduce using rule 29 (ExprCalc)
    BITOR   reduce using rule 29 (ExprCalc)
    EQU     reduce using rule 29 (ExprCalc)
    GEQ     reduce using rule 29 (ExprCalc)
    GTR     reduce using rule 29 (ExprCalc)
    LEQ     reduce using rule 29 (ExprCalc)
    LSS     reduce using rule 29 (ExprCalc)
    NEQ     reduce using rule 29 (ExprCalc)
    OR      reduce using rule 29 (ExprCalc)

state 14 // '-'

   37 ExprCalc: '-' . ExprCalc  // assoc %left, prec 8

    '('     shift, and goto state 28
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20

    CalcCell  goto state 13
    ExprCalc  goto state 27
    ExprFunc  goto state 30
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 29
    Int       goto state 15
    String    goto state 17

state 15 // INT [$end]

   41 CalcCell: Int .  [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ, OR]

    $end    reduce using rule 41 (CalcCell)
    '%'     reduce using rule 41 (CalcCell)
    ')'     reduce using rule 41 (CalcCell)
    '*'     reduce using rule 41 (CalcCell)
    '+'     reduce using rule 41 (CalcCell)
    ','     reduce using rule 41 (CalcCell)
    '-'     reduce using rule 41 (CalcCell)
    '/'     reduce using rule 41 (CalcCell)
    ']'     reduce using rule 41 (CalcCell)
    AND     reduce using rule 41 (CalcCell)
    BITAND  reduce using rule 41 (CalcCell)
    BITOR   reduce using rule 41 (CalcCell)
    EQU     reduce using rule 41 (CalcCell)
    GEQ     reduce using rule 41 (CalcCell)
    GTR     reduce using rule 41 (CalcCell)
    LEQ     reduce using rule 41 (CalcCell)
    LSS     reduce using rule 41 (CalcCell)
    NEQ     reduce using rule 41 (CalcCell)
    OR      reduce using rule 41 (CalcCell)

state 16 // FLOAT [$end]

   42 CalcCell: Float .  [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ, OR]

    $end    reduce using rule 42 (CalcCell)
    '%'     reduce using rule 42 (CalcCell)
    ')'     reduce using rule 42 (CalcCell)
    '*'     reduce using rule 42 (CalcCell)
    '+'     reduce using rule 42 (CalcCell)
    ','     reduce using rule 42 (CalcCell)
    '-'     reduce using rule 42 (CalcCell)
    '/'     reduce using rule 42 (CalcCell)
    ']'     reduce using rule 42 (CalcCell)
    AND     reduce using rule 42 (CalcCell)
    BITAND  reduce using rule 42 (CalcCell)
    BITOR   reduce using rule 42 (CalcCell)
    EQU     reduce using rule 42 (CalcCell)
    GEQ     reduce using rule 42 (CalcCell)
    GTR     reduce using rule 42 (CalcCell)
    LEQ     reduce using rule 42 (CalcCell)
    LSS     reduce using rule 42 (CalcCell)
    NEQ     reduce using rule 42 (CalcCell)
    OR      reduce using rule 42 (CalcCell)

state 17 // STRING [$end]

   43 CalcCell: String .  [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ, OR]

    $end    reduce using rule 43 (CalcCell)
    '%'     reduce using rule 43 (CalcCell)
    ')'     reduce using rule 43 (CalcCell)
    '*'     reduce using rule 43 (CalcCell)
    '+'     reduce using rule 43 (CalcCell)
    ','     reduce using rule 43 (CalcCell)
    '-'     reduce using rule 43 (CalcCell)
    '/'     reduce using rule 43 (CalcCell)
    ']'     reduce using rule 43 (CalcCell)
    AND     reduce using rule 43 (CalcCell)
    BITAND  reduce using rule 43 (CalcCell)
    BITOR   reduce using rule 43 (CalcCell)
    EQU     reduce using rule 43 (CalcCell)
    GEQ     reduce using rule 43 (CalcCell)
    GTR     reduce using rule 43 (CalcCell)
    LEQ     reduce using rule 43 (CalcCell)
    LSS     reduce using rule 43 (CalcCell)
    NEQ     reduce using rule 43 (CalcCell)
    OR      reduce using rule 43 (CalcCell)

state 18 // INT

   46 Int: INT .  [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ, OR]

    $end    reduce using rule 46 (Int)
    '%'     reduce using rule 46 (Int)
    ')'     reduce using rule 46 (Int)
    '*'     reduce using rule 46 (Int)
    '+'     reduce using rule 46 (Int)
    ','     reduce using rule 46 (Int)
    '-'     reduce using rule 46 (Int)
    '/'     reduce using rule 46 (Int)
    ']'     reduce using rule 46 (Int)
    AND     reduce using rule 46 (Int)
    BITAND  reduce using rule 46 (Int)
    BITOR   reduce using rule 46 (Int)
    EQU     reduce using rule 46 (Int)
    GEQ     reduce using rule 46 (Int)
    GTR     reduce using rule 46 (Int)
    LEQ     reduce using rule 46 (Int)
    LSS     reduce using rule 46 (Int)
    NEQ     reduce using rule 46 (Int)
    OR      reduce using rule 46 (Int)

state 19 // FLOAT

   47 Float: FLOAT .  [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ, OR]

    $end    reduce using rule 47 (Float)
    '%'     reduce using rule 47 (Float)
    ')'     reduce using rule 47 (Float)
    '*'     reduce using rule 47 (Float)
    '+'     reduce using rule 47 (Float)
    ','     reduce using rule 47 (Float)
    '-'     reduce using rule 47 (Float)
    '/'     reduce using rule 47 (Float)
    ']'     reduce using rule 47 (Float)
    AND     reduce using rule 47 (Float)
    BITAND  reduce using rule 47 (Float)
    BITOR   reduce using rule 47 (Float)
    EQU     reduce using rule 47 (Float)
    GEQ     reduce using rule 47 (Float)
    GTR     reduce using rule 47 (Float)
    LEQ     reduce using rule 47 (Float)
    LSS     reduce using rule 47 (Float)
    NEQ     reduce using rule 47 (Float)
    OR      reduce using rule 47 (Float)

state 20 // STRING

   48 String: STRING .  [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ, OR]

    $end    reduce using rule 48 (String)
    '%'     reduce using rule 48 (String)
    ')'     reduce using rule 48 (String)
    '*'     reduce using rule 48 (String)
    '+'     reduce using rule 48 (String)
    ','     reduce using rule 48 (String)
    '-'     reduce using rule 48 (String)
    '/'     reduce using rule 48 (String)
    ']'     reduce using rule 48 (String)
    AND     reduce using rule 48 (String)
    BITAND  reduce using rule 48 (String)
    BITOR   reduce using rule 48 (String)
    EQU     reduce using rule 48 (String)
    GEQ     reduce using rule 48 (String)
    GTR     reduce using rule 48 (String)
    LEQ     reduce using rule 48 (String)
    LSS     reduce using rule 48 (String)
    NEQ     reduce using rule 48 (String)
    OR      reduce using rule 48 (String)

state 21 // TRUE

   49 Bool: TRUE .  [$end, ')', ',', ']', AND, EQU, NEQ, OR]

    $end  reduce using rule 49 (Bool)
    ')'   reduce using rule 49 (Bool)
    ','   reduce using rule 49 (Bool)
    ']'   reduce using rule 49 (Bool)
    AND   reduce using rule 49 (Bool)
    EQU   reduce using rule 49 (Bool)
    NEQ   reduce using rule 49 (Bool)
    OR    reduce using rule 49 (Bool)

state 22 // FALSE

   50 Bool: FALSE .  [$end, ')', ',', ']', AND, EQU, NEQ, OR]

    $end  reduce using rule 50 (Bool)
    ')'   reduce using rule 50 (Bool)
    ','   reduce using rule 50 (Bool)
    ']'   reduce using rule 50 (Bool)
    AND   reduce using rule 50 (Bool)
    EQU   reduce using rule 50 (Bool)
    NEQ   reduce using rule 50 (Bool)
    OR    reduce using rule 50 (Bool)

state 23 // ARRAY

   52 Ident: ARRAY .  [$end, '%', ')', '*', '+', ',', '-', '/', '[', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, IN, LEQ, LSS, NEQ, NOTIN, OR]

    $end    reduce using rule 52 (Ident)
    '%'     reduce using rule 52 (Ident)
    ')'     reduce using rule 52 (Ident)
    '*'     reduce using rule 52 (Ident)
    '+'     reduce using rule 52 (Ident)
    ','     reduce using rule 52 (Ident)
    '-'     reduce using rule 52 (Ident)
    '/'     reduce using rule 52 (Ident)
    '['     reduce using rule 52 (Ident)
    ']'     reduce using rule 52 (Ident)
    AND     reduce using rule 52 (Ident)
    BITAND  reduce using rule 52 (Ident)
    BITOR   reduce using rule 52 (Ident)
    EQU     reduce using rule 52 (Ident)
    GEQ     reduce using rule 52 (Ident)
    GTR     reduce using rule 52 (Ident)
    IN      reduce using rule 52 (Ident)
    LEQ     reduce using rule 52 (Ident)
    LSS     reduce using rule 52 (Ident)
    NEQ     reduce using rule 52 (Ident)
    NOTIN   reduce using rule 52 (Ident)
    OR      reduce using rule 52 (Ident)

state 24 // IDENT

   53 IDENTS: IDENT .  [$end, '%', '(', ')', '*', '+', ',', '-', '/', '[', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, IN, LEQ, LSS, NEQ, NOTIN, OR]

    $end    reduce using rule 53 (IDENTS)
    '%'     reduce using rule 53 (IDENTS)
    '('     reduce using rule 53 (IDENTS)
    ')'     reduce using rule 53 (IDENTS)
    '*'     reduce using rule 53 (IDENTS)
    '+'     reduce using rule 53 (IDENTS)
    ','     reduce using rule 53 (IDENTS)
    '-'     reduce using rule 53 (IDENTS)
    '/'     reduce using rule 53 (IDENTS)
    '['     reduce using rule 53 (IDENTS)
    ']'     reduce using rule 53 (IDENTS)
    AND     reduce using rule 53 (IDENTS)
    BITAND  reduce using rule 53 (IDENTS)
    BITOR   reduce using rule 53 (IDENTS)
    EQU     reduce using rule 53 (IDENTS)
    GEQ     reduce using rule 53 (IDENTS)
    GTR     reduce using rule 53 (IDENTS)
    IN      reduce using rule 53 (IDENTS)
    LEQ     reduce using rule 53 (IDENTS)
    LSS     reduce using rule 53 (IDENTS)
    NEQ     reduce using rule 53 (IDENTS)
    NOTIN   reduce using rule 53 (IDENTS)
    OR      reduce using rule 53 (IDENTS)

state 25 // IN

   54 IDENTS: IN .  [$end, '%', '(', ')', '*', '+', ',', '-', '/', '[', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, IN, LEQ, LSS, NEQ, NOTIN, OR]

    $end    reduce using rule 54 (IDENTS)
    '%'     reduce using rule 54 (IDENTS)
    '('     reduce using rule 54 (IDENTS)
    ')'     reduce using rule 54 (IDENTS)
    '*'     reduce using rule 54 (IDENTS)
    '+'     reduce using rule 54 (IDENTS)
    ','     reduce using rule 54 (IDENTS)
    '-'     reduce using rule 54 (IDENTS)
    '/'     reduce using rule 54 (IDENTS)
    '['     reduce using rule 54 (IDENTS)
    ']'     reduce using rule 54 (IDENTS)
    AND     reduce using rule 54 (IDENTS)
    BITAND  reduce using rule 54 (IDENTS)
    BITOR   reduce using rule 54 (IDENTS)
    EQU     reduce using rule 54 (IDENTS)
    GEQ     reduce using rule 54 (IDENTS)
    GTR     reduce using rule 54 (IDENTS)
    IN      reduce using rule 54 (IDENTS)
    LEQ     reduce using rule 54 (IDENTS)
    LSS     reduce using rule 54 (IDENTS)
    NEQ     reduce using rule 54 (IDENTS)
    NOTIN   reduce using rule 54 (IDENTS)
    OR      reduce using rule 54 (IDENTS)

state 26 // NOTIN

   55 IDENTS: NOTIN .  [$end, '%', '(', ')', '*', '+', ',', '-', '/', '[', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, IN, LEQ, LSS, NEQ, NOTIN, OR]

    $end    reduce using rule 55 (IDENTS)
    '%'     reduce using rule 55 (IDENTS)
    '('     reduce using rule 55 (IDENTS)
    ')'     reduce using rule 55 (IDENTS)
    '*'     reduce using rule 55 (IDENTS)
    '+'     reduce using rule 55 (IDENTS)
    ','     reduce using rule 55 (IDENTS)
    '-'     reduce using rule 55 (IDENTS)
    '/'     reduce using rule 55 (IDENTS)
    '['     reduce using rule 55 (IDENTS)
    ']'     reduce using rule 55 (IDENTS)
    AND     reduce using rule 55 (IDENTS)
    BITAND  reduce using rule 55 (IDENTS)
    BITOR   reduce using rule 55 (IDENTS)
    EQU     reduce using rule 55 (IDENTS)
    GEQ     reduce using rule 55 (IDENTS)
    GTR     reduce using rule 55 (IDENTS)
    IN      reduce using rule 55 (IDENTS)
    LEQ     reduce using rule 55 (IDENTS)
    LSS     reduce using rule 55 (IDENTS)
    NEQ     reduce using rule 55 (IDENTS)
    NOTIN   reduce using rule 55 (IDENTS)
    OR      reduce using rule 55 (IDENTS)

state 27 // '-' ARRAY [$end]

   30 ExprCalc: ExprCalc . '+' ExprCalc  // assoc %left, prec 6
   31 ExprCalc: ExprCalc . '-' ExprCalc  // assoc %left, prec 6
   32 ExprCalc: ExprCalc . '*' ExprCalc  // assoc %left, prec 7
   33 ExprCalc: ExprCalc . '/' ExprCalc  // assoc %left, prec 7
   34 ExprCalc: ExprCalc . '%' ExprCalc  // assoc %left, prec 7
   35 ExprCalc: ExprCalc . BITAND ExprCalc  // assoc %left, prec 4
   36 ExprCalc: ExprCalc . BITOR ExprCalc  // assoc %left, prec 3
   37 ExprCalc: '-' ExprCalc .  [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ, OR]  // assoc %left, prec 8

    $end    reduce using rule 37 (ExprCalc)
    '%'     reduce using rule 37 (ExprCalc)
    ')'     reduce using rule 37 (ExprCalc)
    '*'     reduce using rule 37 (ExprCalc)
    '+'     reduce using rule 37 (ExprCalc)
    ','     reduce using rule 37 (ExprCalc)
    '-'     reduce using rule 37 (ExprCalc)
    '/'     reduce using rule 37 (ExprCalc)
    ']'     reduce using rule 37 (ExprCalc)
    AND     reduce using rule 37 (ExprCalc)
    BITAND  reduce using rule 37 (ExprCalc)
    BITOR   reduce using rule 37 (ExprCalc)
    EQU     reduce using rule 37 (ExprCalc)
    GEQ     reduce using rule 37 (ExprCalc)
    GTR     reduce using rule 37 (ExprCalc)
    LEQ     reduce using rule 37 (ExprCalc)
    LSS     reduce using rule 37 (ExprCalc)
    NEQ     reduce using rule 37 (ExprCalc)
    OR      reduce using rule 37 (ExprCalc)

state 28 // '-' '('

   38 ExprCalc: '(' . ExprCalc ')'

    '('     shift, and goto state 28
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20

    CalcCell  goto state 13
    ExprCalc  goto state 31
    ExprFunc  goto state 30
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 29
    Int       goto state 15
    String    goto state 17

state 29 // '-' ARRAY [$end]

   44 CalcCell: Ident .  [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ, OR]

    $end    reduce using rule 44 (CalcCell)
    '%'     reduce using rule 44 (CalcCell)
    ')'     reduce using rule 44 (CalcCell)
    '*'     reduce using rule 44 (CalcCell)
    '+'     reduce using rule 44 (CalcCell)
    ','     reduce using rule 44 (CalcCell)
    '-'     reduce using rule 44 (CalcCell)
    '/'     reduce using rule 44 (CalcCell)
    ']'     reduce using rule 44 (CalcCell)
    AND     reduce using rule 44 (CalcCell)
    BITAND  reduce using rule 44 (CalcCell)
    BITOR   reduce using rule 44 (CalcCell)
    EQU     reduce using rule 44 (CalcCell)
    GEQ     reduce using rule 44 (CalcCell)
    GTR     reduce using rule 44 (CalcCell)
    LEQ     reduce using rule 44 (CalcCell)
    LSS     reduce using rule 44 (CalcCell)
    NEQ     reduce using rule 44 (CalcCell)
    OR      reduce using rule 44 (CalcCell)

state 30 // '-' IDENT '(' ')' [$end]

   45 CalcCell: ExprFunc .  [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ, OR]

    $end    reduce using rule 45 (CalcCell)
    '%'     reduce using rule 45 (CalcCell)
    ')'     reduce using rule 45 (CalcCell)
    '*'     reduce using rule 45 (CalcCell)
    '+'     reduce using rule 45 (CalcCell)
    ','     reduce using rule 45 (CalcCell)
    '-'     reduce using rule 45 (CalcCell)
    '/'     reduce using rule 45 (CalcCell)
    ']'     reduce using rule 45 (CalcCell)
    AND     reduce using rule 45 (CalcCell)
    BITAND  reduce using rule 45 (CalcCell)
    BITOR   reduce using rule 45 (CalcCell)
    EQU     reduce using rule 45 (CalcCell)
    GEQ     reduce using rule 45 (CalcCell)
    GTR     reduce using rule 45 (CalcCell)
    LEQ     reduce using rule 45 (CalcCell)
    LSS     reduce using rule 45 (CalcCell)
    NEQ     reduce using rule 45 (CalcCell)
    OR      reduce using rule 45 (CalcCell)

state 31 // '-' '(' ARRAY ['%']

   30 ExprCalc: ExprCalc . '+' ExprCalc  // assoc %left, prec 6
   31 ExprCalc: ExprCalc . '-' ExprCalc  // assoc %left, prec 6
   32 ExprCalc: ExprCalc . '*' ExprCalc  // assoc %left, prec 7
   33 ExprCalc: ExprCalc . '/' ExprCalc  // assoc %left, prec 7
   34 ExprCalc: ExprCalc . '%' ExprCalc  // assoc %left, prec 7
   35 ExprCalc: ExprCalc . BITAND ExprCalc  // assoc %left, prec 4
   36 ExprCalc: ExprCalc . BITOR ExprCalc  // assoc %left, prec 3
   38 ExprCalc: '(' ExprCalc . ')'

    '%'     shift, and goto state 36
    ')'     shift, and goto state 39
    '*'     shift, and goto state 34
    '+'     shift, and goto state 32
    '-'     shift, and goto state 33
    '/'     shift, and goto state 35
    BITAND  shift, and goto state 37
    BITOR   shift, and goto state 38

state 32 // ARRAY '+'

   30 ExprCalc: ExprCalc '+' . ExprCalc  // assoc %left, prec 6

    '('     shift, and goto state 28
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20

    CalcCell  goto state 13
    ExprCalc  goto state 46
    ExprFunc  goto state 30
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 29
    Int       goto state 15
    String    goto state 17

state 33 // ARRAY '-'

   31 ExprCalc: ExprCalc '-' . ExprCalc  // assoc %left, prec 6

    '('     shift, and goto state 28
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20

    CalcCell  goto state 13
    ExprCalc  goto state 45
    ExprFunc  goto state 30
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 29
    Int       goto state 15
    String    goto state 17

state 34 // ARRAY '*'

   32 ExprCalc: ExprCalc '*' . ExprCalc  // assoc %left, prec 7

    '('     shift, and goto state 28
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20

    CalcCell  goto state 13
    ExprCalc  goto state 44
    ExprFunc  goto state 30
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 29
    Int       goto state 15
    String    goto state 17

state 35 // ARRAY '/'

   33 ExprCalc: ExprCalc '/' . ExprCalc  // assoc %left, prec 7

    '('     shift, and goto state 28
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20

    CalcCell  goto state 13
    ExprCalc  goto state 43
    ExprFunc  goto state 30
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 29
    Int       goto state 15
    String    goto state 17

state 36 // ARRAY '%'

   34 ExprCalc: ExprCalc '%' . ExprCalc  // assoc %left, prec 7

    '('     shift, and goto state 28
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20

    CalcCell  goto state 13
    ExprCalc  goto state 42
    ExprFunc  goto state 30
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 29
    Int       goto state 15
    String    goto state 17

state 37 // ARRAY BITAND

   35 ExprCalc: ExprCalc BITAND . ExprCalc  // assoc %left, prec 4

    '('     shift, and goto state 28
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20

    CalcCell  goto state 13
    ExprCalc  goto state 41
    ExprFunc  goto state 30
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 29
    Int       goto state 15
    String    goto state 17

state 38 // ARRAY BITOR

   36 ExprCalc: ExprCalc BITOR . ExprCalc  // assoc %left, prec 3

    '('     shift, and goto state 28
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20

    CalcCell  goto state 13
    ExprCalc  goto state 40
    ExprFunc  goto state 30
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 29
    Int       goto state 15
    String    goto state 17

state 39 // '(' ARRAY ')'

   38 ExprCalc: '(' ExprCalc ')' .  [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ, OR]

    $end    reduce using rule 38 (ExprCalc)
    '%'     reduce using rule 38 (ExprCalc)
    ')'     reduce using rule 38 (ExprCalc)
    '*'     reduce using rule 38 (ExprCalc)
    '+'     reduce using rule 38 (ExprCalc)
    ','     reduce using rule 38 (ExprCalc)
    '-'     reduce using rule 38 (ExprCalc)
    '/'     reduce using rule 38 (ExprCalc)
    ']'     reduce using rule 38 (ExprCalc)
    AND     reduce using rule 38 (ExprCalc)
    BITAND  reduce using rule 38 (ExprCalc)
    BITOR   reduce using rule 38 (ExprCalc)
    EQU     reduce using rule 38 (ExprCalc)
    GEQ     reduce using rule 38 (ExprCalc)
    GTR     reduce using rule 38 (ExprCalc)
    LEQ     reduce using rule 38 (ExprCalc)
    LSS     reduce using rule 38 (ExprCalc)
    NEQ     reduce using rule 38 (ExprCalc)
    OR      reduce using rule 38 (ExprCalc)

state 40 // ARRAY BITOR ARRAY [$end]

   30 ExprCalc: ExprCalc . '+' ExprCalc  // assoc %left, prec 6
   31 ExprCalc: ExprCalc . '-' ExprCalc  // assoc %left, prec 6
   32 ExprCalc: ExprCalc . '*' ExprCalc  // assoc %left, prec 7
   33 ExprCalc: ExprCalc . '/' ExprCalc  // assoc %left, prec 7
   34 ExprCalc: ExprCalc . '%' ExprCalc  // assoc %left, prec 7
   35 ExprCalc: ExprCalc . BITAND ExprCalc  // assoc %left, prec 4
   36 ExprCalc: ExprCalc . BITOR ExprCalc  // assoc %left, prec 3
   36 ExprCalc: ExprCalc BITOR ExprCalc .  [$end, ')', ',', ']', AND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ, OR]  // assoc %left, prec 3

    $end    reduce using rule 36 (ExprCalc)
    '%'     shift, and goto state 36
    ')'     reduce using rule 36 (ExprCalc)
    '*'     shift, and goto state 34
    '+'     shift, and goto state 32
    ','     reduce using rule 36 (ExprCalc)
    '-'     shift, and goto state 33
    '/'     shift, and goto state 35
    ']'     reduce using rule 36 (ExprCalc)
    AND     reduce using rule 36 (ExprCalc)
    BITAND  shift, and goto state 37
    BITOR   reduce using rule 36 (ExprCalc)
    EQU     reduce using rule 36 (ExprCalc)
    GEQ     reduce using rule 36 (ExprCalc)
    GTR     reduce using rule 36 (ExprCalc)
    LEQ     reduce using rule 36 (ExprCalc)
    LSS     reduce using rule 36 (ExprCalc)
    NEQ     reduce using rule 36 (ExprCalc)
    OR      reduce using rule 36 (ExprCalc)

state 41 // ARRAY BITAND ARRAY [$end]

   30 ExprCalc: ExprCalc . '+' ExprCalc  // assoc %left, prec 6
   31 ExprCalc: ExprCalc . '-' ExprCalc  // assoc %left, prec 6
   32 ExprCalc: ExprCalc . '*' ExprCalc  // assoc %left, prec 7
   33 ExprCalc: ExprCalc . '/' ExprCalc  // assoc %left, prec 7
   34 ExprCalc: ExprCalc . '%' ExprCalc  // assoc %left, prec 7
   35 ExprCalc: ExprCalc . BITAND ExprCalc  // assoc %left, prec 4
   35 ExprCalc: ExprCalc BITAND ExprCalc .  [$end, ')', ',', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ, OR]  // assoc %left, prec 4
   36 ExprCalc: ExprCalc . BITOR ExprCalc  // assoc %left, prec 3

    $end    reduce using rule 35 (ExprCalc)
    '%'     shift, and goto state 36
    ')'     reduce using rule 35 (ExprCalc)
    '*'     shift, and goto state 34
    '+'     shift, and goto state 32
    ','     reduce using rule 35 (ExprCalc)
    '-'     shift, and goto state 33
    '/'     shift, and goto state 35
    ']'     reduce using rule 35 (ExprCalc)
    AND     reduce using rule 35 (ExprCalc)
    BITAND  reduce using rule 35 (ExprCalc)
    BITOR   reduce using rule 35 (ExprCalc)
    EQU     reduce using rule 35 (ExprCalc)
    GEQ     reduce using rule 35 (ExprCalc)
    GTR     reduce using rule 35 (ExprCalc)
    LEQ     reduce using rule 35 (ExprCalc)
    LSS     reduce using rule 35 (ExprCalc)
    NEQ     reduce using rule 35 (ExprCalc)
    OR      reduce using rule 35 (ExprCalc)

state 42 // ARRAY '%' ARRAY [$end]

   30 ExprCalc: ExprCalc . '+' ExprCalc  // assoc %left, prec 6
   31 ExprCalc: ExprCalc . '-' ExprCalc  // assoc %left, prec 6
   32 ExprCalc: ExprCalc . '*' ExprCalc  // assoc %left, prec 7
   33 ExprCalc: ExprCalc . '/' ExprCalc  // assoc %left, prec 7
   34 ExprCalc: ExprCalc . '%' ExprCalc  // assoc %left, prec 7
   34 ExprCalc: ExprCalc '%' ExprCalc .  [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ, OR]  // assoc %left, prec 7
   35 ExprCalc: ExprCalc . BITAND ExprCalc  // assoc %left, prec 4
   36 ExprCalc: ExprCalc . BITOR ExprCalc  // assoc %left, prec 3

    $end    reduce using rule 34 (ExprCalc)
    '%'     reduce using rule 34 (ExprCalc)
    ')'     reduce using rule 34 (ExprCalc)
    '*'     reduce using rule 34 (ExprCalc)
    '+'     reduce using rule 34 (ExprCalc)
    ','     reduce using rule 34 (ExprCalc)
    '-'     reduce using rule 34 (ExprCalc)
    '/'     reduce using rule 34 (ExprCalc)
    ']'     reduce using rule 34 (ExprCalc)
    AND     reduce using rule 34 (ExprCalc)
    BITAND  reduce using rule 34 (ExprCalc)
    BITOR   reduce using rule 34 (ExprCalc)
    EQU     reduce using rule 34 (ExprCalc)
    GEQ     reduce using rule 34 (ExprCalc)
    GTR     reduce using rule 34 (ExprCalc)
    LEQ     reduce using rule 34 (ExprCalc)
    LSS     reduce using rule 34 (ExprCalc)
    NEQ     reduce using rule 34 (ExprCalc)
    OR      reduce using rule 34 (ExprCalc)

state 43 // ARRAY '/' ARRAY [$end]

   30 ExprCalc: ExprCalc . '+' ExprCalc  // assoc %left, prec 6
   31 ExprCalc: ExprCalc . '-' ExprCalc  // assoc %left, prec 6
   32 ExprCalc: ExprCalc . '*' ExprCalc  // assoc %left, prec 7
   33 ExprCalc: ExprCalc . '/' ExprCalc  // assoc %left, prec 7
   33 ExprCalc: ExprCalc '/' ExprCalc .  [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ, OR]  // assoc %left, prec 7
   34 ExprCalc: ExprCalc . '%' ExprCalc  // assoc %left, prec 7
   35 ExprCalc: ExprCalc . BITAND ExprCalc  // assoc %left, prec 4
   36 ExprCalc: ExprCalc . BITOR ExprCalc  // assoc %left, prec 3

    $end    reduce using rule 33 (ExprCalc)
    '%'     reduce using rule 33 (ExprCalc)
    ')'     reduce using rule 33 (ExprCalc)
    '*'     reduce using rule 33 (ExprCalc)
    '+'     reduce using rule 33 (ExprCalc)
    ','     reduce using rule 33 (ExprCalc)
    '-'     reduce using rule 33 (ExprCalc)
    '/'     reduce using rule 33 (ExprCalc)
    ']'     reduce using rule 33 (ExprCalc)
    AND     reduce using rule 33 (ExprCalc)
    BITAND  reduce using rule 33 (ExprCalc)
    BITOR   reduce using rule 33 (ExprCalc)
    EQU     reduce using rule 33 (ExprCalc)
    GEQ     reduce using rule 33 (ExprCalc)
    GTR     reduce using rule 33 (ExprCalc)
    LEQ     reduce using rule 33 (ExprCalc)
    LSS     reduce using rule 33 (ExprCalc)
    NEQ     reduce using rule 33 (ExprCalc)
    OR      reduce using rule 33 (ExprCalc)

state 44 // ARRAY '*' ARRAY [$end]

   30 ExprCalc: ExprCalc . '+' ExprCalc  // assoc %left, prec 6
   31 ExprCalc: ExprCalc . '-' ExprCalc  // assoc %left, prec 6
   32 ExprCalc: ExprCalc . '*' ExprCalc  // assoc %left, prec 7
   32 ExprCalc: ExprCalc '*' ExprCalc .  [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ, OR]  // assoc %left, prec 7
   33 ExprCalc: ExprCalc . '/' ExprCalc  // assoc %left, prec 7
   34 ExprCalc: ExprCalc . '%' ExprCalc  // assoc %left, prec 7
   35 ExprCalc: ExprCalc . BITAND ExprCalc  // assoc %left, prec 4
   36 ExprCalc: ExprCalc . BITOR ExprCalc  // assoc %left, prec 3

    $end    reduce using rule 32 (ExprCalc)
    '%'     reduce using rule 32 (ExprCalc)
    ')'     reduce using rule 32 (ExprCalc)
    '*'     reduce using rule 32 (ExprCalc)
    '+'     reduce using rule 32 (ExprCalc)
    ','     reduce using rule 32 (ExprCalc)
    '-'     reduce using rule 32 (ExprCalc)
    '/'     reduce using rule 32 (ExprCalc)
    ']'     reduce using rule 32 (ExprCalc)
    AND     reduce using rule 32 (ExprCalc)
    BITAND  reduce using rule 32 (ExprCalc)
    BITOR   reduce using rule 32 (ExprCalc)
    EQU     reduce using rule 32 (ExprCalc)
    GEQ     reduce using rule 32 (ExprCalc)
    GTR     reduce using rule 32 (ExprCalc)
    LEQ     reduce using rule 32 (ExprCalc)
    LSS     reduce using rule 32 (ExprCalc)
    NEQ     reduce using rule 32 (ExprCalc)
    OR      reduce using rule 32 (ExprCalc)

state 45 // ARRAY '-' ARRAY [$end]

   30 ExprCalc: ExprCalc . '+' ExprCalc  // assoc %left, prec 6
   31 ExprCalc: ExprCalc . '-' ExprCalc  // assoc %left, prec 6
   31 ExprCalc: ExprCalc '-' ExprCalc .  [$end, ')', '+', ',', '-', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ, OR]  // assoc %left, prec 6
   32 ExprCalc: ExprCalc . '*' ExprCalc  // assoc %left, prec 7
   33 ExprCalc: ExprCalc . '/' ExprCalc  // assoc %left, prec 7
   34 ExprCalc: ExprCalc . '%' ExprCalc  // assoc %left, prec 7
   35 ExprCalc: ExprCalc . BITAND ExprCalc  // assoc %left, prec 4
   36 ExprCalc: ExprCalc . BITOR ExprCalc  // assoc %left, prec 3

    $end    reduce using rule 31 (ExprCalc)
    '%'     shift, and goto state 36
    ')'     reduce using rule 31 (ExprCalc)
    '*'     shift, and goto state 34
    '+'     reduce using rule 31 (ExprCalc)
    ','     reduce using rule 31 (ExprCalc)
    '-'     reduce using rule 31 (ExprCalc)
    '/'     shift, and goto state 35
    ']'     reduce using rule 31 (ExprCalc)
    AND     reduce using rule 31 (ExprCalc)
    BITAND  reduce using rule 31 (ExprCalc)
    BITOR   reduce using rule 31 (ExprCalc)
    EQU     reduce using rule 31 (ExprCalc)
    GEQ     reduce using rule 31 (ExprCalc)
    GTR     reduce using rule 31 (ExprCalc)
    LEQ     reduce using rule 31 (ExprCalc)
    LSS     reduce using rule 31 (ExprCalc)
    NEQ     reduce using rule 31 (ExprCalc)
    OR      reduce using rule 31 (ExprCalc)

state 46 // ARRAY '+' ARRAY [$end]

   30 ExprCalc: ExprCalc . '+' ExprCalc  // assoc %left, prec 6
   30 ExprCalc: ExprCalc '+' ExprCalc .  [$end, ')', '+', ',', '-', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ, OR]  // assoc %left, prec 6
   31 ExprCalc: ExprCalc . '-' ExprCalc  // assoc %left, prec 6
   32 ExprCalc: ExprCalc . '*' ExprCalc  // assoc %left, prec 7
   33 ExprCalc: ExprCalc . '/' ExprCalc  // assoc %left, prec 7
   34 ExprCalc: ExprCalc . '%' ExprCalc  // assoc %left, prec 7
   35 ExprCalc: ExprCalc . BITAND ExprCalc  // assoc %left, prec 4
   36 ExprCalc: ExprCalc . BITOR ExprCalc  // assoc %left, prec 3

    $end    reduce using rule 30 (ExprCalc)
    '%'     shift, and goto state 36
    ')'     reduce using rule 30 (ExprCalc)
    '*'     shift, and goto state 34
    '+'     reduce using rule 30 (ExprCalc)
    ','     reduce using rule 30 (ExprCalc)
    '-'     reduce using rule 30 (ExprCalc)
    '/'     shift, and goto state 35
    ']'     reduce using rule 30 (ExprCalc)
    AND     reduce using rule 30 (ExprCalc)
    BITAND  reduce using rule 30 (ExprCalc)
    BITOR   reduce using rule 30 (ExprCalc)
    EQU     reduce using rule 30 (ExprCalc)
    GEQ     reduce using rule 30 (ExprCalc)
    GTR     reduce using rule 30 (ExprCalc)
    LEQ     reduce using rule 30 (ExprCalc)
    LSS     reduce using rule 30 (ExprCalc)
    NEQ     reduce using rule 30 (ExprCalc)
    OR      reduce using rule 30 (ExprCalc)

state 47 // IDENT '('

   25 ExprFunc: IDENTS '(' . ')'
   26 ExprFunc: IDENTS '(' . FuncArgs ')'

    '('     shift, and goto state 28
    ')'     shift, and goto state 48
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FALSE   shift, and goto state 22
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20
    TRUE    shift, and goto state 21

    Bool      goto state 52
    BoolCell  goto state 50
    CalcCell  goto state 13
    ExprCalc  goto state 51
    ExprFunc  goto state 30
    Float     goto state 16
    FuncArgs  goto state 49
    IDENTS    goto state 12
    Ident     goto state 29
    Int       goto state 15
    String    goto state 17

state 48 // IDENT '(' ')'

   25 ExprFunc: IDENTS '(' ')' .  [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ, OR]

    $end    reduce using rule 25 (ExprFunc)
    '%'     reduce using rule 25 (ExprFunc)
    ')'     reduce using rule 25 (ExprFunc)
    '*'     reduce using rule 25 (ExprFunc)
    '+'     reduce using rule 25 (ExprFunc)
    ','     reduce using rule 25 (ExprFunc)
    '-'     reduce using rule 25 (ExprFunc)
    '/'     reduce using rule 25 (ExprFunc)
    ']'     reduce using rule 25 (ExprFunc)
    AND     reduce using rule 25 (ExprFunc)
    BITAND  reduce using rule 25 (ExprFunc)
    BITOR   reduce using rule 25 (ExprFunc)
    EQU     reduce using rule 25 (ExprFunc)
    GEQ     reduce using rule 25 (ExprFunc)
    GTR     reduce using rule 25 (ExprFunc)
    LEQ     reduce using rule 25 (ExprFunc)
    LSS     reduce using rule 25 (ExprFunc)
    NEQ     reduce using rule 25 (ExprFunc)
    OR      reduce using rule 25 (ExprFunc)

state 49 // IDENT '(' ARRAY [')']

   26 ExprFunc: IDENTS '(' FuncArgs . ')'
   28 FuncArgs: FuncArgs . ',' BoolCell

    ')'  shift, and goto state 53
    ','  shift, and goto state 54

state 50 // IDENT '(' ARRAY [')']

   27 FuncArgs: BoolCell .  [')', ',']

    ')'  reduce using rule 27 (FuncArgs)
    ','  reduce using rule 27 (FuncArgs)

state 51 // IDENT '(' ARRAY [$end]

   30 ExprCalc: ExprCalc . '+' ExprCalc  // assoc %left, prec 6
   31 ExprCalc: ExprCalc . '-' ExprCalc  // assoc %left, prec 6
   32 ExprCalc: ExprCalc . '*' ExprCalc  // assoc %left, prec 7
   33 ExprCalc: ExprCalc . '/' ExprCalc  // assoc %left, prec 7
   34 ExprCalc: ExprCalc . '%' ExprCalc  // assoc %left, prec 7
   35 ExprCalc: ExprCalc . BITAND ExprCalc  // assoc %left, prec 4
   36 ExprCalc: ExprCalc . BITOR ExprCalc  // assoc %left, prec 3
   40 BoolCell: ExprCalc .  [$end, ')', ',', ']', AND, OR]

    $end    reduce using rule 40 (BoolCell)
    '%'     shift, and goto state 36
    ')'     reduce using rule 40 (BoolCell)
    '*'     shift, and goto state 34
    '+'     shift, and goto state 32
    ','     reduce using rule 40 (BoolCell)
    '-'     shift, and goto state 33
    '/'     shift, and goto state 35
    ']'     reduce using rule 40 (BoolCell)
    AND     reduce using rule 40 (BoolCell)
    BITAND  shift, and goto state 37
    BITOR   shift, and goto state 38
    OR      reduce using rule 40 (BoolCell)

state 52 // IDENT '(' FALSE [$end]

   39 BoolCell: Bool .  [$end, ')', ',', ']', AND, OR]

    $end  reduce using rule 39 (BoolCell)
    ')'   reduce using rule 39 (BoolCell)
    ','   reduce using rule 39 (BoolCell)
    ']'   reduce using rule 39 (BoolCell)
    AND   reduce using rule 39 (BoolCell)
    OR    reduce using rule 39 (BoolCell)

state 53 // IDENT '(' ARRAY ')'

   26 ExprFunc: IDENTS '(' FuncArgs ')' .  [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ, OR]

    $end    reduce using rule 26 (ExprFunc)
    '%'     reduce using rule 26 (ExprFunc)
    ')'     reduce using rule 26 (ExprFunc)
    '*'     reduce using rule 26 (ExprFunc)
    '+'     reduce using rule 26 (ExprFunc)
    ','     reduce using rule 26 (ExprFunc)
    '-'     reduce using rule 26 (ExprFunc)
    '/'     reduce using rule 26 (ExprFunc)
    ']'     reduce using rule 26 (ExprFunc)
    AND     reduce using rule 26 (ExprFunc)
    BITAND  reduce using rule 26 (ExprFunc)
    BITOR   reduce using rule 26 (ExprFunc)
    EQU     reduce using rule 26 (ExprFunc)
    GEQ     reduce using rule 26 (ExprFunc)
    GTR     reduce using rule 26 (ExprFunc)
    LEQ     reduce using rule 26 (ExprFunc)
    LSS     reduce using rule 26 (ExprFunc)
    NEQ     reduce using rule 26 (ExprFunc)
    OR      reduce using rule 26 (ExprFunc)

state 54 // IDENT '(' ARRAY ','

   28 FuncArgs: FuncArgs ',' . BoolCell

    '('     shift, and goto state 28
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FALSE   shift, and goto state 22
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20
    TRUE    shift, and goto state 21

    Bool      goto state 52
    BoolCell  goto state 55
    CalcCell  goto state 13
    ExprCalc  goto state 51
    ExprFunc  goto state 30
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 29
    Int       goto state 15
    String    goto state 17

state 55 // IDENT '(' ARRAY ',' ARRAY [')']

   28 FuncArgs: FuncArgs ',' BoolCell .  [')', ',']

    ')'  reduce using rule 28 (FuncArgs)
    ','  reduce using rule 28 (FuncArgs)

state 56 // '[' ARRAY ['%']

    7 ExprBool: Ident . IN '(' FuncArgs ')'
    8 ExprBool: Ident . NOTIN '(' FuncArgs ')'
   44 CalcCell: Ident .  ['%', ')', '*', '+', '-', '/', BITAND, BITOR, EQU, GEQ, GTR, LEQ, LSS, NEQ]

    '%'     reduce using rule 44 (CalcCell)
    ')'     reduce using rule 44 (CalcCell)
    '*'     reduce using rule 44 (CalcCell)
    '+'     reduce using rule 44 (CalcCell)
    '-'     reduce using rule 44 (CalcCell)
    '/'     reduce using rule 44 (CalcCell)
    BITAND  reduce using rule 44 (CalcCell)
    BITOR   reduce using rule 44 (CalcCell)
    EQU     reduce using rule 44 (CalcCell)
    GEQ     reduce using rule 44 (CalcCell)
    GTR     reduce using rule 44 (CalcCell)
    IN      shift, and goto state 75
    LEQ     reduce using rule 44 (CalcCell)
    LSS     reduce using rule 44 (CalcCell)
    NEQ     reduce using rule 44 (CalcCell)
    NOTIN   shift, and goto state 76

state 57 // '[' FALSE [']']

    9 ExprBool: ExprBool . AND ExprBool  // assoc %left, prec 2
   10 ExprBool: ExprBool . OR ExprBool  // assoc %left, prec 1
   18 ExprFilter: '[' ExprBool . ']'

    ']'  shift, and goto state 74
    AND  shift, and goto state 69
    OR   shift, and goto state 70

state 58 // '[' '('

   17 ExprBool: '(' . ExprBool ')'
   38 ExprCalc: '(' . ExprCalc ')'

    '('     shift, and goto state 58
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FALSE   shift, and goto state 22
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20
    TRUE    shift, and goto state 21

    Bool      goto state 5
    BoolCell  goto state 8
    CalcCell  goto state 13
    ExprBool  goto state 59
    ExprCalc  goto state 60
    ExprFunc  goto state 6
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 56
    Int       goto state 15
    String    goto state 17

state 59 // '[' '(' FALSE [')']

    9 ExprBool: ExprBool . AND ExprBool  // assoc %left, prec 2
   10 ExprBool: ExprBool . OR ExprBool  // assoc %left, prec 1
   17 ExprBool: '(' ExprBool . ')'

    ')'  shift, and goto state 71
    AND  shift, and goto state 69
    OR   shift, and goto state 70

state 60 // '(' ARRAY ['%']

   13 ExprBool: ExprCalc . LSS ExprCalc  // assoc %left, prec 5
   14 ExprBool: ExprCalc . LEQ ExprCalc  // assoc %left, prec 5
   15 ExprBool: ExprCalc . GTR ExprCalc  // assoc %left, prec 5
   16 ExprBool: ExprCalc . GEQ ExprCalc  // assoc %left, prec 5
   30 ExprCalc: ExprCalc . '+' ExprCalc  // assoc %left, prec 6
   31 ExprCalc: ExprCalc . '-' ExprCalc  // assoc %left, prec 6
   32 ExprCalc: ExprCalc . '*' ExprCalc  // assoc %left, prec 7
   33 ExprCalc: ExprCalc . '/' ExprCalc  // assoc %left, prec 7
   34 ExprCalc: ExprCalc . '%' ExprCalc  // assoc %left, prec 7
   35 ExprCalc: ExprCalc . BITAND ExprCalc  // assoc %left, prec 4
   36 ExprCalc: ExprCalc . BITOR ExprCalc  // assoc %left, prec 3
   38 ExprCalc: '(' ExprCalc . ')'
   40 BoolCell: ExprCalc .  [EQU, NEQ]

    '%'     shift, and goto state 36
    ')'     shift, and goto state 39
    '*'     shift, and goto state 34
    '+'     shift, and goto state 32
    '-'     shift, and goto state 33
    '/'     shift, and goto state 35
    BITAND  shift, and goto state 37
    BITOR   shift, and goto state 38
    EQU     reduce using rule 40 (BoolCell)
    GEQ     shift, and goto state 64
    GTR     shift, and goto state 63
    LEQ     shift, and goto state 62
    LSS     shift, and goto state 61
    NEQ     reduce using rule 40 (BoolCell)

state 61 // ARRAY LSS

   13 ExprBool: ExprCalc LSS . ExprCalc  // assoc %left, prec 5

    '('     shift, and goto state 28
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20

    CalcCell  goto state 13
    ExprCalc  goto state 68
    ExprFunc  goto state 30
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 29
    Int       goto state 15
    String    goto state 17

state 62 // ARRAY LEQ

   14 ExprBool: ExprCalc LEQ . ExprCalc  // assoc %left, prec 5

    '('     shift, and goto state 28
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20

    CalcCell  goto state 13
    ExprCalc  goto state 67
    ExprFunc  goto state 30
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 29
    Int       goto state 15
    String    goto state 17

state 63 // ARRAY GTR

   15 ExprBool: ExprCalc GTR . ExprCalc  // assoc %left, prec 5

    '('     shift, and goto state 28
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20

    CalcCell  goto state 13
    ExprCalc  goto state 66
    ExprFunc  goto state 30
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 29
    Int       goto state 15
    String    goto state 17

state 64 // ARRAY GEQ

   16 ExprBool: ExprCalc GEQ . ExprCalc  // assoc %left, prec 5

    '('     shift, and goto state 28
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20

    CalcCell  goto state 13
    ExprCalc  goto state 65
    ExprFunc  goto state 30
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 29
    Int       goto state 15
    String    goto state 17

state 65 // ARRAY GEQ ARRAY [$end]

   16 ExprBool: ExprCalc GEQ ExprCalc .  [$end, ')', ']', AND, OR]  // assoc %left, prec 5
   30 ExprCalc: ExprCalc . '+' ExprCalc  // assoc %left, prec 6
   31 ExprCalc: ExprCalc . '-' ExprCalc  // assoc %left, prec 6
   32 ExprCalc: ExprCalc . '*' ExprCalc  // assoc %left, prec 7
   33 ExprCalc: ExprCalc . '/' ExprCalc  // assoc %left, prec 7
   34 ExprCalc: ExprCalc . '%' ExprCalc  // assoc %left, prec 7
   35 ExprCalc: ExprCalc . BITAND ExprCalc  // assoc %left, prec 4
   36 ExprCalc: ExprCalc . BITOR ExprCalc  // assoc %left, prec 3

    $end    reduce using rule 16 (ExprBool)
    '%'     shift, and goto state 36
    ')'     reduce using rule 16 (ExprBool)
    '*'     shift, and goto state 34
    '+'     shift, and goto state 32
    '-'     shift, and goto state 33
    '/'     shift, and goto state 35
    ']'     reduce using rule 16 (ExprBool)
    AND     reduce using rule 16 (ExprBool)
    BITAND  shift, and goto state 37
    BITOR   shift, and goto state 38
    OR      reduce using rule 16 (ExprBool)

state 66 // ARRAY GTR ARRAY [$end]

   15 ExprBool: ExprCalc GTR ExprCalc .  [$end, ')', ']', AND, OR]  // assoc %left, prec 5
   30 ExprCalc: ExprCalc . '+' ExprCalc  // assoc %left, prec 6
   31 ExprCalc: ExprCalc . '-' ExprCalc  // assoc %left, prec 6
   32 ExprCalc: ExprCalc . '*' ExprCalc  // assoc %left, prec 7
   33 ExprCalc: ExprCalc . '/' ExprCalc  // assoc %left, prec 7
   34 ExprCalc: ExprCalc . '%' ExprCalc  // assoc %left, prec 7
   35 ExprCalc: ExprCalc . BITAND ExprCalc  // assoc %left, prec 4
   36 ExprCalc: ExprCalc . BITOR ExprCalc  // assoc %left, prec 3

    $end    reduce using rule 15 (ExprBool)
    '%'     shift, and goto state 36
    ')'     reduce using rule 15 (ExprBool)
    '*'     shift, and goto state 34
    '+'     shift, and goto state 32
    '-'     shift, and goto state 33
    '/'     shift, and goto state 35
    ']'     reduce using rule 15 (ExprBool)
    AND     reduce using rule 15 (ExprBool)
    BITAND  shift, and goto state 37
    BITOR   shift, and goto state 38
    OR      reduce using rule 15 (ExprBool)

state 67 // ARRAY LEQ ARRAY [$end]

   14 ExprBool: ExprCalc LEQ ExprCalc .  [$end, ')', ']', AND, OR]  // assoc %left, prec 5
   30 ExprCalc: ExprCalc . '+' ExprCalc  // assoc %left, prec 6
   31 ExprCalc: ExprCalc . '-' ExprCalc  // assoc %left, prec 6
   32 ExprCalc: ExprCalc . '*' ExprCalc  // assoc %left, prec 7
   33 ExprCalc: ExprCalc . '/' ExprCalc  // assoc %left, prec 7
   34 ExprCalc: ExprCalc . '%' ExprCalc  // assoc %left, prec 7
   35 ExprCalc: ExprCalc . BITAND ExprCalc  // assoc %left, prec 4
   36 ExprCalc: ExprCalc . BITOR ExprCalc  // assoc %left, prec 3

    $end    reduce using rule 14 (ExprBool)
    '%'     shift, and goto state 36
    ')'     reduce using rule 14 (ExprBool)
    '*'     shift, and goto state 34
    '+'     shift, and goto state 32
    '-'     shift, and goto state 33
    '/'     shift, and goto state 35
    ']'     reduce using rule 14 (ExprBool)
    AND     reduce using rule 14 (ExprBool)
    BITAND  shift, and goto state 37
    BITOR   shift, and goto state 38
    OR      reduce using rule 14 (ExprBool)

state 68 // ARRAY LSS ARRAY [$end]

   13 ExprBool: ExprCalc LSS ExprCalc .  [$end, ')', ']', AND, OR]  // assoc %left, prec 5
   30 ExprCalc: ExprCalc . '+' ExprCalc  // assoc %left, prec 6
   31 ExprCalc: ExprCalc . '-' ExprCalc  // assoc %left, prec 6
   32 ExprCalc: ExprCalc . '*' ExprCalc  // assoc %left, prec 7
   33 ExprCalc: ExprCalc . '/' ExprCalc  // assoc %left, prec 7
   34 ExprCalc: ExprCalc . '%' ExprCalc  // assoc %left, prec 7
   35 ExprCalc: ExprCalc . BITAND ExprCalc  // assoc %left, prec 4
   36 ExprCalc: ExprCalc . BITOR ExprCalc  // assoc %left, prec 3

    $end    reduce using rule 13 (ExprBool)
    '%'     shift, and goto state 36
    ')'     reduce using rule 13 (ExprBool)
    '*'     shift, and goto state 34
    '+'     shift, and goto state 32
    '-'     shift, and goto state 33
    '/'     shift, and goto state 35
    ']'     reduce using rule 13 (ExprBool)
    AND     reduce using rule 13 (ExprBool)
    BITAND  shift, and goto state 37
    BITOR   shift, and goto state 38
    OR      reduce using rule 13 (ExprBool)

state 69 // '[' FALSE AND

    9 ExprBool: ExprBool AND . ExprBool  // assoc %left, prec 2

    '('     shift, and goto state 58
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FALSE   shift, and goto state 22
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20
    TRUE    shift, and goto state 21

    Bool      goto state 5
    BoolCell  goto state 8
    CalcCell  goto state 13
    ExprBool  goto state 73
    ExprCalc  goto state 9
    ExprFunc  goto state 6
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 56
    Int       goto state 15
    String    goto state 17

state 70 // '[' FALSE OR

   10 ExprBool: ExprBool OR . ExprBool  // assoc %left, prec 1

    '('     shift, and goto state 58
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FALSE   shift, and goto state 22
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20
    TRUE    shift, and goto state 21

    Bool      goto state 5
    BoolCell  goto state 8
    CalcCell  goto state 13
    ExprBool  goto state 72
    ExprCalc  goto state 9
    ExprFunc  goto state 6
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 56
    Int       goto state 15
    String    goto state 17

state 71 // '(' FALSE ')'

   17 ExprBool: '(' ExprBool ')' .  [$end, ')', ']', AND, OR]

    $end  reduce using rule 17 (ExprBool)
    ')'   reduce using rule 17 (ExprBool)
    ']'   reduce using rule 17 (ExprBool)
    AND   reduce using rule 17 (ExprBool)
    OR    reduce using rule 17 (ExprBool)

state 72 // '[' FALSE OR FALSE [$end]

    9 ExprBool: ExprBool . AND ExprBool  // assoc %left, prec 2
   10 ExprBool: ExprBool . OR ExprBool  // assoc %left, prec 1
   10 ExprBool: ExprBool OR ExprBool .  [$end, ')', ']', OR]  // assoc %left, prec 1

    $end  reduce using rule 10 (ExprBool)
    ')'   reduce using rule 10 (ExprBool)
    ']'   reduce using rule 10 (ExprBool)
    AND   shift, and goto state 69
    OR    reduce using rule 10 (ExprBool)

state 73 // '[' FALSE AND FALSE [$end]

    9 ExprBool: ExprBool . AND ExprBool  // assoc %left, prec 2
    9 ExprBool: ExprBool AND ExprBool .  [$end, ')', ']', AND, OR]  // assoc %left, prec 2
   10 ExprBool: ExprBool . OR ExprBool  // assoc %left, prec 1

    $end  reduce using rule 9 (ExprBool)
    ')'   reduce using rule 9 (ExprBool)
    ']'   reduce using rule 9 (ExprBool)
    AND   reduce using rule 9 (ExprBool)
    OR    reduce using rule 9 (ExprBool)

state 74 // '[' FALSE ']'

   18 ExprFilter: '[' ExprBool ']' .  [$end, ')', AND, OR]

    $end  reduce using rule 18 (ExprFilter)
    ')'   reduce using rule 18 (ExprFilter)
    AND   reduce using rule 18 (ExprFilter)
    OR    reduce using rule 18 (ExprFilter)

state 75 // ARRAY IN

    7 ExprBool: Ident IN . '(' FuncArgs ')'

    '('  shift, and goto state 80

state 76 // ARRAY NOTIN

    8 ExprBool: Ident NOTIN . '(' FuncArgs ')'

    '('  shift, and goto state 77

state 77 // ARRAY NOTIN '('

    8 ExprBool: Ident NOTIN '(' . FuncArgs ')'

    '('     shift, and goto state 28
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FALSE   shift, and goto state 22
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20
    TRUE    shift, and goto state 21

    Bool      goto state 52
    BoolCell  goto state 50
    CalcCell  goto state 13
    ExprCalc  goto state 51
    ExprFunc  goto state 30
    Float     goto state 16
    FuncArgs  goto state 78
    IDENTS    goto state 12
    Ident     goto state 29
    Int       goto state 15
    String    goto state 17

state 78 // ARRAY NOTIN '(' ARRAY [')']

    8 ExprBool: Ident NOTIN '(' FuncArgs . ')'
   28 FuncArgs: FuncArgs . ',' BoolCell

    ')'  shift, and goto state 79
    ','  shift, and goto state 54

state 79 // ARRAY NOTIN '(' ARRAY ')'

    8 ExprBool: Ident NOTIN '(' FuncArgs ')' .  [$end, ')', ']', AND, OR]

    $end  reduce using rule 8 (ExprBool)
    ')'   reduce using rule 8 (ExprBool)
    ']'   reduce using rule 8 (ExprBool)
    AND   reduce using rule 8 (ExprBool)
    OR    reduce using rule 8 (ExprBool)

state 80 // ARRAY IN '('

    7 ExprBool: Ident IN '(' . FuncArgs ')'

    '('     shift, and goto state 28
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FALSE   shift, and goto state 22
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20
    TRUE    shift, and goto state 21

    Bool      goto state 52
    BoolCell  goto state 50
    CalcCell  goto state 13
    ExprCalc  goto state 51
    ExprFunc  goto state 30
    Float     goto state 16
    FuncArgs  goto state 81
    IDENTS    goto state 12
    Ident     goto state 29
    Int       goto state 15
    String    goto state 17

state 81 // ARRAY IN '(' ARRAY [')']

    7 ExprBool: Ident IN '(' FuncArgs . ')'
   28 FuncArgs: FuncArgs . ',' BoolCell

    ')'  shift, and goto state 82
    ','  shift, and goto state 54

state 82 // ARRAY IN '(' ARRAY ')'

    7 ExprBool: Ident IN '(' FuncArgs ')' .  [$end, ')', ']', AND, OR]

    $end  reduce using rule 7 (ExprBool)
    ')'   reduce using rule 7 (ExprBool)
    ']'   reduce using rule 7 (ExprBool)
    AND   reduce using rule 7 (ExprBool)
    OR    reduce using rule 7 (ExprBool)

state 83 // '(' FALSE [')']

    9 ExprBool: ExprBool . AND ExprBool  // assoc %left, prec 2
   10 ExprBool: ExprBool . OR ExprBool  // assoc %left, prec 1
   17 ExprBool: '(' ExprBool . ')'
   20 ExprFilter: ExprBool . AND ExprFilter  // assoc %left, prec 2
   21 ExprFilter: ExprBool . OR ExprFilter  // assoc %left, prec 1

    ')'  shift, and goto state 71
    AND  shift, and goto state 90
    OR   shift, and goto state 91

state 84 // '(' '[' FALSE ']' [')']

   22 ExprFilter: ExprFilter . AND ExprBool  // assoc %left, prec 2
   23 ExprFilter: ExprFilter . OR ExprBool  // assoc %left, prec 1
   24 ExprFilter: '(' ExprFilter . ')'

    ')'  shift, and goto state 87
    AND  shift, and goto state 85
    OR   shift, and goto state 86

state 85 // '[' FALSE ']' AND

   22 ExprFilter: ExprFilter AND . ExprBool  // assoc %left, prec 2

    '('     shift, and goto state 58
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FALSE   shift, and goto state 22
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20
    TRUE    shift, and goto state 21

    Bool      goto state 5
    BoolCell  goto state 8
    CalcCell  goto state 13
    ExprBool  goto state 89
    ExprCalc  goto state 9
    ExprFunc  goto state 6
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 56
    Int       goto state 15
    String    goto state 17

state 86 // '[' FALSE ']' OR

   23 ExprFilter: ExprFilter OR . ExprBool  // assoc %left, prec 1

    '('     shift, and goto state 58
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FALSE   shift, and goto state 22
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20
    TRUE    shift, and goto state 21

    Bool      goto state 5
    BoolCell  goto state 8
    CalcCell  goto state 13
    ExprBool  goto state 88
    ExprCalc  goto state 9
    ExprFunc  goto state 6
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 56
    Int       goto state 15
    String    goto state 17

state 87 // '(' '[' FALSE ']' ')'

   24 ExprFilter: '(' ExprFilter ')' .  [$end, ')', AND, OR]

    $end  reduce using rule 24 (ExprFilter)
    ')'   reduce using rule 24 (ExprFilter)
    AND   reduce using rule 24 (ExprFilter)
    OR    reduce using rule 24 (ExprFilter)

state 88 // '[' FALSE ']' OR FALSE [$end]

    9 ExprBool: ExprBool . AND ExprBool  // assoc %left, prec 2
   10 ExprBool: ExprBool . OR ExprBool  // assoc %left, prec 1
   23 ExprFilter: ExprFilter OR ExprBool .  [$end, ')', OR]  // assoc %left, prec 1

    $end  reduce using rule 23 (ExprFilter)
    ')'   reduce using rule 23 (ExprFilter)
    AND   shift, and goto state 69
    OR    reduce using rule 23 (ExprFilter)

state 89 // '[' FALSE ']' AND FALSE [$end]

    9 ExprBool: ExprBool . AND ExprBool  // assoc %left, prec 2
   10 ExprBool: ExprBool . OR ExprBool  // assoc %left, prec 1
   22 ExprFilter: ExprFilter AND ExprBool .  [$end, ')', AND, OR]  // assoc %left, prec 2

    $end  reduce using rule 22 (ExprFilter)
    ')'   reduce using rule 22 (ExprFilter)
    AND   reduce using rule 22 (ExprFilter)
    OR    reduce using rule 22 (ExprFilter)

state 90 // FALSE AND

    9 ExprBool: ExprBool AND . ExprBool  // assoc %left, prec 2
   20 ExprFilter: ExprBool AND . ExprFilter  // assoc %left, prec 2

    '('     shift, and goto state 10
    '-'     shift, and goto state 14
    '['     shift, and goto state 11
    ARRAY   shift, and goto state 23
    FALSE   shift, and goto state 22
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20
    TRUE    shift, and goto state 21

    Bool        goto state 5
    BoolCell    goto state 8
    CalcCell    goto state 13
    ExprBool    goto state 94
    ExprCalc    goto state 9
    ExprFilter  goto state 95
    ExprFunc    goto state 6
    Float       goto state 16
    IDENTS      goto state 12
    Ident       goto state 7
    Int         goto state 15
    String      goto state 17

state 91 // FALSE OR

   10 ExprBool: ExprBool OR . ExprBool  // assoc %left, prec 1
   21 ExprFilter: ExprBool OR . ExprFilter  // assoc %left, prec 1

    '('     shift, and goto state 10
    '-'     shift, and goto state 14
    '['     shift, and goto state 11
    ARRAY   shift, and goto state 23
    FALSE   shift, and goto state 22
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20
    TRUE    shift, and goto state 21

    Bool        goto state 5
    BoolCell    goto state 8
    CalcCell    goto state 13
    ExprBool    goto state 92
    ExprCalc    goto state 9
    ExprFilter  goto state 93
    ExprFunc    goto state 6
    Float       goto state 16
    IDENTS      goto state 12
    Ident       goto state 7
    Int         goto state 15
    String      goto state 17

state 92 // FALSE OR FALSE [$end]

    9 ExprBool: ExprBool . AND ExprBool  // assoc %left, prec 2
   10 ExprBool: ExprBool . OR ExprBool  // assoc %left, prec 1
   10 ExprBool: ExprBool OR ExprBool .  [$end, ')', OR]  // assoc %left, prec 1
   20 ExprFilter: ExprBool . AND ExprFilter  // assoc %left, prec 2
   21 ExprFilter: ExprBool . OR ExprFilter  // assoc %left, prec 1

    $end  reduce using rule 10 (ExprBool)
    ')'   reduce using rule 10 (ExprBool)
    AND   shift, and goto state 90
    OR    reduce using rule 10 (ExprBool)

state 93 // FALSE OR '[' FALSE ']' [$end]

   21 ExprFilter: ExprBool OR ExprFilter .  [$end, ')', OR]  // assoc %left, prec 1
   22 ExprFilter: ExprFilter . AND ExprBool  // assoc %left, prec 2
   23 ExprFilter: ExprFilter . OR ExprBool  // assoc %left, prec 1

    $end  reduce using rule 21 (ExprFilter)
    ')'   reduce using rule 21 (ExprFilter)
    AND   shift, and goto state 85
    OR    reduce using rule 21 (ExprFilter)

state 94 // FALSE AND FALSE [$end]

    9 ExprBool: ExprBool . AND ExprBool  // assoc %left, prec 2
    9 ExprBool: ExprBool AND ExprBool .  [$end, ')', AND, OR]  // assoc %left, prec 2
   10 ExprBool: ExprBool . OR ExprBool  // assoc %left, prec 1
   20 ExprFilter: ExprBool . AND ExprFilter  // assoc %left, prec 2
   21 ExprFilter: ExprBool . OR ExprFilter  // assoc %left, prec 1

    $end  reduce using rule 9 (ExprBool)
    ')'   reduce using rule 9 (ExprBool)
    AND   reduce using rule 9 (ExprBool)
    OR    reduce using rule 9 (ExprBool)

state 95 // FALSE AND '[' FALSE ']' [$end]

   20 ExprFilter: ExprBool AND ExprFilter .  [$end, ')', AND, OR]  // assoc %left, prec 2
   22 ExprFilter: ExprFilter . AND ExprBool  // assoc %left, prec 2
   23 ExprFilter: ExprFilter . OR ExprBool  // assoc %left, prec 1

    $end  reduce using rule 20 (ExprFilter)
    ')'   reduce using rule 20 (ExprFilter)
    AND   reduce using rule 20 (ExprFilter)
    OR    reduce using rule 20 (ExprFilter)

state 96 // ARRAY EQU

   11 ExprBool: BoolCell EQU . BoolCell  // assoc %left, prec 5

    '('     shift, and goto state 28
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FALSE   shift, and goto state 22
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20
    TRUE    shift, and goto state 21

    Bool      goto state 52
    BoolCell  goto state 99
    CalcCell  goto state 13
    ExprCalc  goto state 51
    ExprFunc  goto state 30
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 29
    Int       goto state 15
    String    goto state 17

state 97 // ARRAY NEQ

   12 ExprBool: BoolCell NEQ . BoolCell  // assoc %left, prec 5

    '('     shift, and goto state 28
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FALSE   shift, and goto state 22
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20
    TRUE    shift, and goto state 21

    Bool      goto state 52
    BoolCell  goto state 98
    CalcCell  goto state 13
    ExprCalc  goto state 51
    ExprFunc  goto state 30
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 29
    Int       goto state 15
    String    goto state 17

state 98 // ARRAY NEQ ARRAY [$end]

   12 ExprBool: BoolCell NEQ BoolCell .  [$end, ')', ']', AND, OR]  // assoc %left, prec 5

    $end  reduce using rule 12 (ExprBool)
    ')'   reduce using rule 12 (ExprBool)
    ']'   reduce using rule 12 (ExprBool)
    AND   reduce using rule 12 (ExprBool)
    OR    reduce using rule 12 (ExprBool)

state 99 // ARRAY EQU ARRAY [$end]

   11 ExprBool: BoolCell EQU BoolCell .  [$end, ')', ']', AND, OR]  // assoc %left, prec 5

    $end  reduce using rule 11 (ExprBool)
    ')'   reduce using rule 11 (ExprBool)
    ']'   reduce using rule 11 (ExprBool)
    AND   reduce using rule 11 (ExprBool)
    OR    reduce using rule 11 (ExprBool)

state 100 // ARRAY '['

   19 ExprFilter: Ident '[' . ExprBool ']'

    '('     shift, and goto state 58
    '-'     shift, and goto state 14
    ARRAY   shift, and goto state 23
    FALSE   shift, and goto state 22
    FLOAT   shift, and goto state 19
    IDENT   shift, and goto state 24
    IN      shift, and goto state 25
    INT     shift, and goto state 18
    NOTIN   shift, and goto state 26
    STRING  shift, and goto state 20
    TRUE    shift, and goto state 21

    Bool      goto state 5
    BoolCell  goto state 8
    CalcCell  goto state 13
    ExprBool  goto state 101
    ExprCalc  goto state 9
    ExprFunc  goto state 6
    Float     goto state 16
    IDENTS    goto state 12
    Ident     goto state 56
    Int       goto state 15
    String    goto state 17

state 101 // ARRAY '[' FALSE [']']

    9 ExprBool: ExprBool . AND ExprBool  // assoc %left, prec 2
   10 ExprBool: ExprBool . OR ExprBool  // assoc %left, prec 1
   19 ExprFilter: Ident '[' ExprBool . ']'

    ']'  shift, and goto state 102
    AND  shift, and goto state 69
    OR   shift, and goto state 70

state 102 // ARRAY '[' FALSE ']'

   19 ExprFilter: Ident '[' ExprBool ']' .  [$end, ')', AND, OR]

    $end  reduce using rule 19 (ExprFilter)
    ')'   reduce using rule 19 (ExprFilter)
    AND   reduce using rule 19 (ExprFilter)
    OR    reduce using rule 19 (ExprFilter)

